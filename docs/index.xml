<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homepage on Making with Code</title>
    <link>https://cproctor.github.io/making-with-code/</link>
    <description>Recent content in Homepage on Making with Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cproctor.github.io/making-with-code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Labs</title>
      <link>https://cproctor.github.io/making-with-code/practices/activity/labs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/activity/labs/</guid>
      <description>Labs Students will work on labs in class which integrate the skills and emphasize developing collaborative problem-solving. Early in the year, labs and projects will be tightly-integrated; students will be guided through creating projects. One feature of labs is that we will be providing some of the libraries students use, allowing them to interact with broader computational systems than they would be able to do on their own. For example, students will initially encounter machine library through functions we provide which allow them to do powerful things with their code.</description>
    </item>
    
    <item>
      <title>Problem sets</title>
      <link>https://cproctor.github.io/making-with-code/practices/activity/problem_sets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/activity/problem_sets/</guid>
      <description>Problem Sets There will be regularly-assigned problem sets supporting students in practicing their skills. (We should assess school culture, but I like the idea of having a small problem set due in each day of class). Students may work together on these, but they must be coded independently. Problem sets will be assessed automatically so that students get immediate feedback. Generally, problem sets will lag behind labs so that they are practice with content we’ve already explored together.</description>
    </item>
    
    <item>
      <title>Teaching notes (Future, just a demo)</title>
      <link>https://cproctor.github.io/making-with-code/courses/cs9/notes_future_20_21/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/courses/cs9/notes_future_20_21/</guid>
      <description>future teaching notes These aren&amp;rsquo;t real teaching notes, but they do illustrate how we can potentially have many sets of teaching notes in the repo from different teachers.</description>
    </item>
    
    <item>
      <title>Teaching notes (Hong Kong, 2019-2020)</title>
      <link>https://cproctor.github.io/making-with-code/courses/cs9/notes_hk_19_20/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/courses/cs9/notes_hk_19_20/</guid>
      <description>Course structures Infrastructure The course will be taught in Python. Each student will do her work primarily in Github repositories. We will use GitHub Classroom to manage assignments. Each project, lab, and problem set will be a separate repo.
Assessment Projects and labs will be assessed manually, giving feedback not just on correctness but on style, etc. Problem sets will be graded automatically via GitHub webhooks&amp;ndash;every time commits are pushed, the auto-grader will assess the assignment and create or update an Issue giving feedback.</description>
    </item>
    
    <item>
      <title>Assigning competence</title>
      <link>https://cproctor.github.io/making-with-code/practices/people/assigning_competence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/people/assigning_competence/</guid>
      <description>Assigning competence  Assigning competence: Create practices by which students are seen as experts.  One useful practice that embodies this: when helping people from the queue, follow up helping a student by saying, “It looks like you understand this issue pretty well now. When I see another student having the same problem, may I send them to you for help?” That way, the student solidifies the understanding by teaching someone else, and gets to be an expert at that issue.</description>
    </item>
    
    <item>
      <title>Authorship</title>
      <link>https://cproctor.github.io/making-with-code/practices/people/authorship/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/people/authorship/</guid>
      <description>Authorship  Authorship: It is very important that each student develop as an author of her code.  Never touch a student’s keyboard. Instead, sit with the student and guide her in what to do. It can be helpful to bring another laptop, increase the font size, and type out code for the student to copy. It’s also great to have portable whiteboards or writable desk surfaces, so you can develop pseudocode together that then stays with the student.</description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://cproctor.github.io/making-with-code/dev/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/dev/config/</guid>
      <description>Configuration Configuration Files Multiple configuration files are provided to build Making with Code for various audiences:
 dev (default) teachers students  To build for a particular audience, use the environment flag:
hugo --environment teachers Configuration Params The following params are defined. Making with Code extends the Book theme, so those params are defined as well. You should not need to modify these directly. Instead, use the environment flag.
ShowTeaching Show teaching content on courses, units, lessons, and modules.</description>
    </item>
    
    <item>
      <title>Funds of Knowledge</title>
      <link>https://cproctor.github.io/making-with-code/practices/people/funds_of_knowledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/people/funds_of_knowledge/</guid>
      <description>Funds of Knowledge Explain how connected learning is related here...  Funds of knowledge refers to the idea that we will look at students as having lots of resources they can deploy in their learning (rather than viewing them in terms of their deficits). This also means we need to let go of the idea that we’re solely in the position of determining what’s worthwhile in CS. Our students are going to create things that are worthwhile and successful on their terms, not ours.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://cproctor.github.io/making-with-code/practices/tools/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/tools/git/</guid>
      <description>Git GitHub </description>
    </item>
    
    <item>
      <title>Groupwork</title>
      <link>https://cproctor.github.io/making-with-code/practices/people/groupwork/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/people/groupwork/</guid>
      <description>Include concepts from &#34;Students As Teachers and Communicators&#34; from Handbook of CS Ed Research.  Groupwork  Groupwork: Small groups are an important context for high-quality disciplinary talk. When students get to choose their groups, they can take advantage of existing social relationships. However, this can create in equities (the strongest students cluster together) and can also bring social tensions into the classroom.  Our recommendation is to always assign seats and groups, change groups regularly (perhaps every unit), and allow students some private input (eg “I really don’t get along with X”).</description>
    </item>
    
    <item>
      <title>Help Queue</title>
      <link>https://cproctor.github.io/making-with-code/practices/activity/help_queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/activity/help_queue/</guid>
      <description>Help Queue  Getting help: When working on individual projects and on problem sets, students will often need help from teachers. It is important to create structures to allocate teacher time so that pushier students can’t dominate, and to build a culture where it’s a good thing to be stuck, to need help, and to seek help.  One useful tool is the help queue, simply a list on the whiteboard where people can sign up if they need help.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://cproctor.github.io/making-with-code/practices/activity/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/activity/projects/</guid>
      <description>Projects One primary structure in the course will be open-ended projects. The initial units will provide scaffolding, supporting students in designing and implementing projects. Later in the year, students will design their own projects independently.
We ought to name the overall teaching philosophy as constructionism, but also explain how the project-based approach makes sense within POGIL and within computational action.  </description>
    </item>
    
    <item>
      <title>Structure</title>
      <link>https://cproctor.github.io/making-with-code/dev/structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/dev/structure/</guid>
      <description>Structure Making with Code is organized into courses, units, and lessons. Courses are the highest-level container for content. They contain one or more units. Units are clusters of content organized around essential questions, providing materials to orchestrate student learning for 1-2 months. Lessons are the finest level of organization, representing one class meeting. Lessons will be the hardest to adapt to different school schedules, so using lessons is optional. Courses and units are purely organizational structures, while lessons are also themselves a content type.</description>
    </item>
    
    <item>
      <title>Syntax</title>
      <link>https://cproctor.github.io/making-with-code/dev/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/dev/syntax/</guid>
      <description>Syntax Making with Code is a static site built with Hugo. You will need to understand the basics of the Hugo framework to contribute. Content is written in markdown, which you can probably pick up just by looking at some of the existing content.
Custom Shortcodes include_module Includes the full content of a module (from the same unit) in a lesson.
{{&amp;lt; include_module &amp;quot;lab_terminal_adventure&amp;quot; &amp;gt;}} ref_module Creates a link to a module (from the same unit) in a lesson.</description>
    </item>
    
    <item>
      <title>Teaching</title>
      <link>https://cproctor.github.io/making-with-code/courses/cs9/teaching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/courses/cs9/teaching/</guid>
      <description>Introduction This is a 9th grade constructionist computer science course. The central goal is to create a rich, diverse community of people making things with code, through which they can develop personal relationships with powerful ideas. The course is designed to help all students learn to interact with code as an expressive, evocative medium, which helps to structure thought. At the same time, the course is designed to support computational literacy, connecting with students’ existing ways of reading and writing.</description>
    </item>
    
    <item>
      <title>Teaching</title>
      <link>https://cproctor.github.io/making-with-code/courses/cs9/unit00/lessons/lesson00/teaching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/courses/cs9/unit00/lessons/lesson00/teaching/</guid>
      <description>Lesson 0 - Welcome to Computer Science The purpose of the first lesson is to introduce students to the goals, structures, and norms of the course. By the end of Lesson 0.0, students should have a sense for what the course is about as well as a fun initial experience making with code.
We will introduce the Help Queue . (This is just a test of the ref_practice shortcode. Should it embed content or link out to it?</description>
    </item>
    
    <item>
      <title>Teaching notes</title>
      <link>https://cproctor.github.io/making-with-code/courses/cs9/unit00/lessons/lesson00/notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/courses/cs9/unit00/lessons/lesson00/notes/</guid>
      <description>Lesson 0.0 Example schedule  Before class [15 minutes before]  Set up into table groups, have name tags ready for students, physical journal Set up ppt Set up warmup Post it notes Bring some extension cords Play music Write agenda on board     Do Now (5 min) Basic configuration (10 min) Intro to writing code (10 min) Make a drawing (20 min) Put computers away + break (5 min) Intro to CS (5 min) Course Overview/Syllabus (10 min) Norms (10 min) Homework for next class and Questions (3 min) Summary of lesson (2 min)  Norms When students come into the room, it should be configured in a manner suitable for informal working&amp;ndash;ideally small clusters of 4 (so they can break out into pairs or have small discussions).</description>
    </item>
    
    <item>
      <title>Teaching notes (Hong Kong, 2019-2020)</title>
      <link>https://cproctor.github.io/making-with-code/courses/cs9/unit00/notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/courses/cs9/unit00/notes/</guid>
      <description>10 class meetings This initial unit prioritizes getting students making personally-meaningful things as fast as possible. This means we aren’t aiming for completeness. In particular, we’re not introducing variables or conditional control structures in this unit: most students won’t need them, and we’ll spend a lot of time with them in the next unit.  Problem sets Assign students to create various drawing primitives, and use them to build up more complex functions.</description>
    </item>
    
    <item>
      <title>Unit 00: Teaching</title>
      <link>https://cproctor.github.io/making-with-code/courses/cs9/unit00/teaching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/courses/cs9/unit00/teaching/</guid>
      <description>Working within the context of drawing, students practice building up complex programs from simple ones. We’ll use Python’s turtle library, and use our exported SVGs to cut things on the laser cutter/cnc. Loosely inspired by Chris’s Python drawing unit from GMS (this links to the Scratch drawing assignment; further up on the page are lessons translating this into Python). Programming: Imperative programming; Basics of syntax; functions; decomposition and code reuse. Introductory debugging strategies.</description>
    </item>
    
  </channel>
</rss>