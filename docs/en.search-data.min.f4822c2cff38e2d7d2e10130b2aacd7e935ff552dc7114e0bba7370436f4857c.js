'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/making-with-code/practices/activity/labs/','title':"Labs",'content':"Labs Students will work on labs in class which integrate the skills and emphasize developing collaborative problem-solving. Early in the year, labs and projects will be tightly-integrated; students will be guided through creating projects. One feature of labs is that we will be providing some of the libraries students use, allowing them to interact with broader computational systems than they would be able to do on their own. For example, students will initially encounter machine library through functions we provide which allow them to do powerful things with their code.\n"});index.add({'id':1,'href':'/making-with-code/practices/activity/problem_sets/','title':"Problem sets",'content':"Problem Sets There will be regularly-assigned problem sets supporting students in practicing their skills. (We should assess school culture, but I like the idea of having a small problem set due in each day of class). Students may work together on these, but they must be coded independently. Problem sets will be assessed automatically so that students get immediate feedback. Generally, problem sets will lag behind labs so that they are practice with content we’ve already explored together.\nUpdate this. We didn't give problem sets this year, and problem sets differ meaningfully from homework. Homework should extend and practice what we've already learned in class; everyone should be able to complete it on their own. Problem sets, in contrast, are equivalent to labs, but focus on mathematical or algorithmic ideas rather than programming. They are introduced in CS10.  "});index.add({'id':2,'href':'/making-with-code/courses/','title':"Courses",'content':""});index.add({'id':3,'href':'/making-with-code/practices/','title':"Practices",'content':"Practices These are practices. Explain how there is an overall pedagogical approach here distinct which transcends courses.\nTODO  Where does assessment fit in?   "});index.add({'id':4,'href':'/making-with-code/dev/','title':"Development",'content':"Development This section describes how to develop Making with Code.\n"});index.add({'id':5,'href':'/making-with-code/courses/cs9/','title':"CS9",'content':"Welcome to CS 9 Curriculum This is a high-level overview of the curricular units that comprise this introductory course.\n Unit 0: Drawing ↕  Unit 0: Drawing Working within the context of drawing, students practice building up complex programs from simple ones. We’ll use Python’s turtle library, and use our exported SVGs to cut things on the laser cutter/cnc. Loosely inspired by Chris Proctor’s Python drawing unit from GMS \u0026lt;!\u0026mdash; link broken as of Apr 7, 2020 \u0026mdash;\u0026gt;. Programming: Imperative programming; Basics of syntax; functions; decomposition and code reuse. Introductory debugging strategies.\nProblem sets Assign students to create various drawing primitives, and use them to build up more complex functions. Note: Require all primitives end with the turtle in the same state as when it started. This makes building up more complex routines much easier.\nLab Practice using pseudocode to plan algorithms. Use this method to write pseudocode (and then code) to generate complex puzzle pictures such as geometric designs, tessellations, and procedurally-generated patterns from nature.\nProject Create some personally-meaningful drawing. First, a draft will be due with a sketch of the final project and some planning, including planned subroutines and pseudocode. Use it to make something using the fablab. (eg: engrave your laptop, cut patterns in clothes, mill some useful shape.\n    Unit 1: Data Science ↕  Programming: Introduction to functional programming; abstraction. Types: int, float, bool. Introduction to data structures. Iterating over lists. Students will build on code reuse from unit 1, this time writing functions without side effects that can be composed. Curriculum: Based on introductory unit from BJC.\nProblem sets Write basic functions to perform calculations on numbers and lists. Biggest, smallest, mean, median, mode. Quartiles. Scale, clamp, bin.\nLabs Lab 1: Students will write code to plot histograms, scatter plots, and the line of best fit. Lab 2: Students will be introduced to the basics of Pandas and matplotlib, the standard Python libraries for data analysis and plotting.\nProject Collect some data or use an existing dataset. Frame a research question and use the data to answer it.\n    Unit 2: Games ↕  Unit 2: Games Games and other interactive media are some of the most important texts of the digital age. We will play and discuss several games, discussing how they work technically and drawing on theoretical perspectives to talk about how they create meaningful experiences for the player. Programming: prototyping, decomposition of larger problems, incremental \u0026amp; iterative development of larger projects.\nProblem sets Learning how games work can be a great spur toward imagining new ones. This unit’s problem sets will be focused on implementing simple game mechanics.\nLabs Lab 1: Using the Arcade platformer tutorial, program a maze game. Lab 2: Write an algorithm to procedurally-generate random mazes to initialize the maze game. There will also be ad-hoc mini-labs based on what students need for their games. Likely candidates are gravity, inventories, simulating perspective, animation techniques.\nProject Create a game that matters, perhaps as part of a group. This will be very open-ended, but students will be required to submit a substantial proposal, including a game concept with some evidence of prototyping and iteration; wireframes of the game interface; decomposition of tasks and who plans to work on what.\n    Unit 3: Networking ↕  Perhaps even more than through computational power, computers have transformed our lives through networking. This unit explores how computers interact with each other and will give us opportunities to think about the behavior of larger systems, including how our lives are touched by computer networks. Note: I heard Krates has some neat ideas for teaching networking. I’d love to integrate these ideas (and any others), potentially replacing we should talk! Data structures, error handling. Documentation. Abstraction through layers.\nProblem sets Problem sets will focus on asynchronous programming, interacting with JSON, using Python’s requests and Flask libraries.\nLabs Lab 1: HTTP requests and responses. Students will learn about the basics of the HTTP protocol (status codes and methods), and data serialization via JSON. Lab 2: TCP/IP simulation. We will enact a real-world TCP/IP Simulation, discuss network security, hacking, and surveillance, and then groups will write a distributed message-passing client based on the same algorithm.\nProject Chatbot microservices. Each student will write an app which responds to network requests. Some examples might be a Chatbot trying to pass the Turing test, a text-based game, or some useful app. A simple web front-end, CLI, and perhaps a configurable Android app will be provided for consuming microservices. We could also consider providing interfaces for email, SMS, or Twitter. It would be powerful to expose the same API for connecting a chatbot microservice to any of these, to emphasize the value of interchangable parts. One limitation is that students will not yet have experience with databases. Students can maintain state with global objects in memory, and will be provided with routines to persist state using pickle or csv (which they will have learned in Unit 2).\nLibraries will be provided for: Sentiment analysis NLP (eg getting the main noun phrase) External APIs such as weather, news, etc. Additionally, students will be encouraged to write, publish, and compose simpler microservices.\n   "});index.add({'id':6,'href':'/making-with-code/courses/cs9/notes_future_20_21/','title':"Teaching notes (Future, just a demo)",'content':"future teaching notes These aren\u0026rsquo;t real teaching notes, but they do illustrate how we can potentially have many sets of teaching notes in the repo from different teachers.\n"});index.add({'id':7,'href':'/making-with-code/courses/cs9/notes_hk_19_20/','title':"Teaching notes (Hong Kong, 2019-2020)",'content':"Course structures Infrastructure The course will be taught in Python. Each student will do her work primarily in Github repositories. We will use GitHub Classroom to manage assignments. Each project, lab, and problem set will be a separate repo.\nAssessment Projects and labs will be assessed manually, giving feedback not just on correctness but on style, etc. Problem sets will be graded automatically via GitHub webhooks\u0026ndash;every time commits are pushed, the auto-grader will assess the assignment and create or update an Issue giving feedback. We will use pedal to automatically grade problem sets.\nGrading    Score Points Description     Full credit 3/2 Completed everything, with flying colors)   Average credit 2/2 Completed everything)   Subpar 1/2 Not completed or not correctly completed)   No submission 0/2 Or no evidence of good-faith effort    Late - deduct 1 point for submissions between 1-7 days late\nWe will not accept late submissions after 7 days\nRevised work - If you submit something that you put a good faith effort by the first deadline and you want to revise the homework, we can accept revisions up until the end of the unit.\nWhen we assess students’ work manually, we will give feedback on the following:\n Creativity of the homework submission Courage with code - willingness to experiment / try new things Effectiveness of concepts/tools usage - Appropriate, effective use of tools and concepts (suggest when there could be a better option) Coding style  Descriptive function and variable naming Documenting the functionality of functions with comments Decomposition of programs into functions Efficiency and elegance of code    "});index.add({'id':8,'href':'/making-with-code/courses/cs9/unit00/lessons/','title':"Lessons",'content':""});index.add({'id':9,'href':'/making-with-code/courses/cs9/unit00/modules/','title':"Modules",'content':""});index.add({'id':10,'href':'/making-with-code/practices/activity/','title':"Activity",'content':"Activity "});index.add({'id':11,'href':'/making-with-code/practices/people/assigning_competence/','title':"Assigning competence",'content':"Assigning competence  Assigning competence: Create practices by which students are seen as experts.  One useful practice that embodies this: when helping people from the queue, follow up helping a student by saying, “It looks like you understand this issue pretty well now. When I see another student having the same problem, may I send them to you for help?” That way, the student solidifies the understanding by teaching someone else, and gets to be an expert at that issue. You can then keep directing students to that expert for days.    "});index.add({'id':12,'href':'/making-with-code/practices/people/authorship/','title':"Authorship",'content':"Authorship  Authorship: It is very important that each student develop as an author of her code.  Never touch a student’s keyboard. Instead, sit with the student and guide her in what to do. It can be helpful to bring another laptop, increase the font size, and type out code for the student to copy. It’s also great to have portable whiteboards or writable desk surfaces, so you can develop pseudocode together that then stays with the student. (The only exception would be if there is some error at a deeper level than the student would be expected to know about, eg incompatible package versions installed.) For problem sets, students should never look at each others’ code. They may work on problems together, using pseudocode and diagrams. This is going to be a challenge, because pair programming might be very productive during labs and group projects.    "});index.add({'id':13,'href':'/making-with-code/courses/cs9/unit00/modules/hw_code_practice/','title':"Code Practice Homework",'content':" Code block style: Do we want to use the black background / white text format? Also how do want to handle references to HK teaching team? (replace with generic \"instructor\" or \"teaching team\"?)  Code Practice Homework  Part 0: Who are you? (5 minutes) ↕  Send your teaching team an email answering the following questions:\n What is your name and what would you like us to call you? What is one goal you have for this class? What is one thing that makes you nervous about this class? What is your favorite dessert?  Note: The italicized time in brackets in each part of the homework is an estimate of the amount of time we think you should spend on each part of the homework. Don\u0026rsquo;t worry if something takes you a little more or less time, but if you are spending significantly more time on some part of the homework, please reach out to your teaching team so we can figure out why :)\n    Part 1: Your first program (15 minutes) ↕  Use Python\u0026rsquo;s turtle library to draw something. You can do this with the functions we talked about in class or more from the Turtle documentation if you want a challenge.\n  Run the code to make sure it works.\n  Open a new Terminal window.\n  Navigate to the directory where your homework is saved.\n  Tell Terminal to open Atom and work on a new file\n ~$ cd Desktop/cs9/unit_00/ ~/Desktop/cs9/unit_00$ atom homework_01.py    Atom should have opened.\n  Paste the starter code below into the window and save it (⌘S). Now you can see this file in Terminal:\n ~/Desktop/cs9/unit_00$ ls homework_01.py    Run the program.\n ~/Desktop/cs9/unit_00$ python homework_01.py      Change the code so it draws something new. (It might help to sketch what you are trying to draw.)\n  After you make a change, save the file and run the program to make sure it worked properly.\n  Be ready to share your drawing in class next time we meet. You don\u0026rsquo;t need to submit anything for this part of the assignment before class.\n  Starter code #!python # Unit 0 Lesson 1 # Author: Your Name from turtle import * # You can add comments anywhere you want. The code below draws a square. forward(100) right(90) forward(100) right(90) forward(100) right(90) forward(100) right(90) # This makes the program wait until you type some input. # Otherwise, it would quit right after it finished drawing. input(\u0026quot;Press enter...\u0026quot;)     Deliverables  An email, as described above. A python file called homework_01.py, submitted your course site. The program should draw something.  "});index.add({'id':14,'href':'/making-with-code/dev/config/','title':"Config",'content':"Configuration Configuration Files Multiple configuration files are provided to build Making with Code for various audiences:\n dev (default) teachers students  To build for a particular audience, use the environment flag:\nhugo --environment teachers Configuration Params The following params are defined. Making with Code extends the Book theme, so those params are defined as well. You should not need to modify these directly. Instead, use the environment flag.\nShowTeaching Show teaching content on courses, units, lessons, and modules.\nShowNotes Show teaching notes (only if ShowTeaching is also set).\nShowDev Shows the development documentation and content within the dev_note shortcode.\nBookLogo Points to the site logo, by default \u0026quot;fablearn.png\u0026quot;.\nCustomCSS A list of custom CSS files to inject into the header.\nExcludeTypesFromMenu Certain types are only intended to be included in larger blocks of content, not on their own. Defaults to [\u0026quot;teaching\u0026quot;, \u0026quot;notes\u0026quot;]\nBookSection This param from the Book theme is ignored.\n"});index.add({'id':15,'href':'/making-with-code/courses/cs9/unit00/modules/lab_decomposition/','title':"Decomposition Lab",'content':"Decomposition Lab Replace the ISF Academy repo links  In this lab, we\u0026rsquo;ll explore how to plan backwards from a goal, breaking a complicated problem down into simpler steps. This lab will be different from previous labs in that you will not be programming. Instead, you will study a complete project and think about how it works. But first, a brief aside about dictonaries.\nAside: Dictionaries Before we get into today\u0026rsquo;s work, we need to learn about another data structure. Paste the starter code below into a new python file, lab_05.py.\n# STARTER CODE zodiac_year_list = [\u0026#39;monkey\u0026#39;,\u0026#39;rooster\u0026#39;, \u0026#39;dog\u0026#39;, \u0026#39;pig\u0026#39;, \u0026#39;rat\u0026#39;, \u0026#39;ox\u0026#39;, \u0026#39;tiger\u0026#39;, \u0026#39;rabbit\u0026#39;, \u0026#39;dragon\u0026#39;, \u0026#39;snake\u0026#39;, \u0026#39;horse\u0026#39;, \u0026#39;sheep\u0026#39;] animal_dict = { \u0026#34;rat\u0026#34;: \u0026#34;鼠\u0026#34;, \u0026#34;ox\u0026#34;: \u0026#34;牛\u0026#34;, \u0026#34;tiger\u0026#34;: \u0026#34;虎\u0026#34;, \u0026#34;rabbit\u0026#34;: \u0026#34;兔\u0026#34;, \u0026#34;dragon\u0026#34;: \u0026#34;龙\u0026#34;, \u0026#34;snake\u0026#34;: \u0026#34;蛇\u0026#34;, \u0026#34;horse\u0026#34;: \u0026#34;马\u0026#34;, \u0026#34;sheep\u0026#34;: \u0026#34;羊\u0026#34;, \u0026#34;monkey\u0026#34;: \u0026#34;猴\u0026#34;, \u0026#34;rooster\u0026#34;: \u0026#34;鸡\u0026#34;, \u0026#34;dog\u0026#34;: \u0026#34;狗\u0026#34;, \u0026#34;pig\u0026#34;: \u0026#34;猪\u0026#34; } # PART A CODE def my_zodiac_year(birth_year): birth_year_animal = zodiac_year_list[birth_year%12] print(\u0026#34;I was born in the year of the {}.\u0026#34;.format(birth_year_animal)) # PART B def create_character_traits(): return { \u0026#34;courage\u0026#34;: 8, \u0026#34;beauty\u0026#34;: 4, \u0026#34;strength\u0026#34;: 7, \u0026#34;empathy\u0026#34;: 5 } def describe_character(traits): if traits[\u0026#34;strength\u0026#34;] \u0026gt; traits[\u0026#34;courage\u0026#34;]: print(\u0026#34;You are a coward.\u0026#34;) elif traits[\u0026#34;strength\u0026#34;] == traits[\u0026#34;courage\u0026#34;]: print(\u0026#34;You are wise, matching your strength to your courage.\u0026#34;) else: print(\u0026#34;You are foolhardy.\u0026#34;) Part A: High 🗝 Useful Data Structure You already know about lists ( Loops Lab ), which are a great way to store things that naturally come one after another, like subway stops on a subway line, or homework assignments in a class. We call lists a data structure because they give structure to data. They put things in line, so you can access each element at an index. After looking over the code in PART A of the starter code, open a Python shell and import the my_zodiac_year function from the lab_05.py file. Run the my_zodiac_year function passing in your birth year as the argument:\n\u0026gt;\u0026gt;\u0026gt; from lab_05 import my_zodiac_year \u0026gt;\u0026gt;\u0026gt; my_zodiac_year(1995) I was born in the year of the pig. This kind of structure works well for things that have a natural order (like zodiac cycles), but what about things that don\u0026rsquo;t have a natural order to them?\nA dictionary is another kind of data structure that is useful for information that does not have a natural order, like images of animals. Dictionaries connect keys to values. For each unique key (for example, an animal name like 'pig'), a dictionary stores a unique value (like a translation 猪). To access the values of a dictionary like the animal_dict, use the following syntax: animal_dict[KEY].\nquit() the python shell\nBelow the print statement in PART A in the lab_05.py file, print the Chinese translation of the English sentence \u0026ldquo;I was born in the year of the \u0026hellip;\u0026rdquo; Access the character for your birth_year_animal by accessing the value in the animal_dict.\nOpen a new python shell and import and run the my_zodiac_year function again with your new code. Now you should see something like:\n\u0026gt;\u0026gt;\u0026gt; from lab_05 import my_zodiac_year \u0026gt;\u0026gt;\u0026gt; my_zodiac_year(1995) I was born in the year of the pig. 我出生在猪年 Part B: Dictionaries in action Dictionaries can be used to show one-to-one relationships like how words in one language are connected to words in other languages, how actions are connected to consequences, or how countries are connected to languages.\nOften we use dictionaries to describe properties of an object. A hero in an adventure game is defined in PART B:\ndef create_character_traits(): return { \u0026#34;courage\u0026#34;: 8, \u0026#34;beauty\u0026#34;: 4, \u0026#34;strength\u0026#34;: 7, \u0026#34;empathy\u0026#34;: 5 } Open a python shell and import the describe_character and create_character_traits functions from the lab_05.py file. Create a character_traits dictionary using the create_character_traits function and run the describe_character function:\n\u0026gt;\u0026gt;\u0026gt; from lab_05 import describe_character, create_character_traits \u0026gt;\u0026gt;\u0026gt; character_traits = create_character_traits() \u0026gt;\u0026gt;\u0026gt; describe_character(character_traits) You are foolhardy. You can loop through a dict in almost the same way you can loop through a list:\n\u0026gt;\u0026gt;\u0026gt; for trait, value in character_traits.items(): ... print(\u0026#34;You have a {} value of {}.\u0026#34;.format(trait, value)) You have a courage value of 8. You have a beauty value of 4. You have a strength value of 7. You have a empathy value of 5. Stop! Once your whole group has carefully read the code in this section and can explain dictionaries, raise your hand to check in with a teacher. Your teacher is going to ask you about details in the code samples above. Make sure your group has read through them carefully.\n  Mannequin   Getting started with decomposition Navigate to your unit_00 directory and download the project using git.\nTEA-JWOLF:unit_00 jwolf$ git clone https://github.com/the-isf-academy/mannequin.git lab_05 TEA-JWOLF:unit_00 jwolf$ cd lab_05 Now you need to figure out what this code is and what it does. Decide with your group how you are going to do this. A few ideas:\n Use tree to list all the files. Read the documentation, either on GitHub or in the README (using atom README.md) The main file is called main.py. Try running it to see what happens.  Exploring mannequin top-down and bottom-up In this section, read and follow along. If you do, the questions in the next section will be easier.\nThere are two main ways of thinking about complex problems: top-down and bottom-up. Top down means thinking about the problem as a whole, and how it could be broken up into a few smaller pieces. Then each of those smaller pieces could be broken into even smaller pieces. Bottom-up means starting with tiny chunks that are so simple we can already solve them, and using them to build gradually larger pieces, until you\u0026rsquo;ve solved the problem. Some people like to start with top-down thinking; others prefer bottom-up. Usually we need to use both.\nLet\u0026rsquo;s start top-down. Open main.py in Atom (atom main.py). It\u0026rsquo;s nice and short, because most of the work is done is done elsewhere. See if you can figure out how the code in main.py works, and discuss these questions with your table group:\n The function default_settings() returns a dict full of settings. What do you think these do? Try changing some settings. Why would the author bother making default_settings() a function, instead of just defining a dict with the settings in it? Where does default_settings() get used?  Now look at what gets imported in main.py:\nfrom helpers import no_delay from body_parts import draw_body First, notice that turtle never gets imported. The actual drawing gets done somewhere else. We\u0026rsquo;ve seen no_delay before (in the drawing package we played with during the modules lab), so let\u0026rsquo;s skip it. The second import statement imports a function called draw_body, which seems to draw a body. Let\u0026rsquo;s open up body_parts.py to see how it works.\nBody Parts body_parts.py has three sections. First, there are import statements. Second, there are a whole bunch of constants (like TORSO_WIDTH = 40). Third, there are five functions, each responsible for drawing a different body part. Before you study this code, skim it with your group. It\u0026rsquo;s particularly important to read the comments and the docstrings (the string following each function). Try to get a sense of what each constant means and what each function does. Your group should be doing a lot of talking\u0026ndash;feel free to ask a teacher if your group has questions.\nTry changing some of the constants and re-running python main.py to see what happens.\nGoing deeper Now your group has some choices. Looking at the import statements, there are some interesting new functions imported from elsewhere. You could open those files to learn how they work.\nfrom turtle import right, left, back, fillcolor from helpers import fly, restore_state_when_finished, update_position from shapes import rectangle, rectangle_from_center, rectangle_from_side_edge You might also have noticed that this module uses fillcolor to fill in shapes. You could open the turtle documentation and read about how filling works.\nYou could also get a little more serious about making changes to the constants in body_parts.py and the settings in main.py. Can you pose the mannequin so she is laughing? Angry? Surprised?\nQuestions As a group, talk about these questions. Then, each student should write answers in her own words in the questions.md file. Each question needs a solid explanation, probably 1-3 sentences. You will submit the questions.md file at the end of the lab.\nRead the turtle documentation on filling. To fill in a shape, you have to call begin_fill() before drawing the shape and end_fill() afterwards. All the shapes in mannequin are filled. Where are begin_fill() and end_fill() actually used? What does restore_state_when_finished do? What\u0026rsquo;s the difference between the settings in main.py and the constants at the top of body_parts.py? Let\u0026rsquo;s imagine you wanted to move one of the constants at the top of body_parts.py (for example, HEAD_COLOR) into the settings in main.py instead. What steps would you have to take? (You can actually try this if you want.) In shapes.py, there are three different functions for drawing a rectangle. Why? The same function, draw_arm, is used to draw the back arm and the front arm. How does this work? Similarly, draw_leg is used to draw the back leg and the front leg. The code for draw_leg and for draw_arm looks suspiciously similar. Can you think of a way to combine these functions? Would this be a good idea? (Yes and No are both reasonable answers\u0026ndash;explain your preference.)  Deliverables  Each student should submit a text file with answers to the questions above.  "});index.add({'id':16,'href':'/making-with-code/courses/cs9/unit00/modules/lab_functions/','title':"Functions Lab",'content':"Functions Lab Removed the \"Input a code from the instructors to move on:\" requirement. Also think about whether we should use dropdowns for different sections of labs  Starter code Create a new file called lab_03.py in atom (This should be at ~/Desktop/cs9/unit_00/lab_03.py.) You\u0026rsquo;ll be turning in this file at the end of the lab. Copy this starter code:\n Starter code for functions lab ↕  # Unit 0 Lab 3 # Author: Your Name from turtle import * from random import * # These constants affect how the program works, so we\u0026#39;ll list them all at the top ASK_FOR_PASSWORD = True PASSWORD = \u0026#34;noodles\u0026#34; TEST_PART_B = False TEST_PART_C = False # A. CODE BLOCKS if ASK_FOR_PASSWORD: guess = input(\u0026#34;What\u0026#39;s the password? \u0026#34;) if guess == PASSWORD: print(\u0026#34;Yesssss!!!!\u0026#34;) print(\u0026#34;Noodles are delicious.\u0026#34;) raise NotImplementedError(\u0026#34;I\u0026#39;m going to go eat some noodles.\u0026#34;) else: raise ValueError(\u0026#34;Wrong password! Now I will crash the program.\u0026#34;) # B. FUNCTIONS def setup(x, y): \u0026#34;Sets up the turtle, ready to draw, at the given coordinates\u0026#34; penup() goto(x, y) pendown() setheading(0) def triangle(side_length): \u0026#34;Draws a triangle\u0026#34; for each_side in range(3): forward(side_length) right(120) def square(side_length): \u0026#34;Draws a square\u0026#34; # YOUR CODE HERE (B1) def pentagon(side_length): \u0026#34;Draws a pentagon\u0026#34; # YOUR CODE HERE (B2) def hexagon(side_length): \u0026#34;Draws a hexagon\u0026#34; # YOUR CODE HERE (B3) def polygon(side_length, number_of_sides): \u0026#34;Draws a polygon with any number of sides\u0026#34; # YOUR CODE HERE (B4) def test_part_b(): print(\u0026#34;Testing out your functions from part B\u0026#34;) speed(0) for x in range(0, 50, 10): for y in range(0, 50, 10): setup(x, y) square(8) setup(-70, -60) for each_side in range(5): pendown() pentagon(20) penup() forward(20) left(360 / 5) setup(-70, 60) for each_side in range(6): pendown() hexagon(20) penup() forward(20) left(360 / 6) setup(100, 50) for n in range(3, 10): polygon(30, n) input(\u0026#34;Press enter to continue...\u0026#34;) if TEST_PART_B: test_part_b() # C. COMBINING FUNCTIONS def rectangle(width, height): \u0026#34;Draws a rectangle, starting with the width and turning to the right\u0026#34; # YOUR CODE HERE (C1) def fly(distance): \u0026#34;Picks up the pen, moves, and then puts the pen down again\u0026#34; # YOUR CODE HERE (C2) def draw_tree(size): \u0026#34;Draws a tree, using a rectangle and three triangles. Starts and ends at the top of the tree\u0026#34; branch_sizes = [size * 1.2, size, size * 0.8] trunk_width = size * 0.2 fillcolor(\u0026#34;brown\u0026#34;) right(90) fly(-trunk_width/2) begin_fill() rectangle(trunk_width, branch_sizes[0]*1.3) end_fill() fly(trunk_width/2) left(90) fillcolor(\u0026#34;green\u0026#34;) for branch_size in branch_sizes: right(150) begin_fill() triangle(branch_size) end_fill() left(150) fly(branch_size / 2) def draw_forest(number_of_trees): \u0026#34;Draws a forest of trees\u0026#34; print(\u0026#34;Testing part C\u0026#34;) speed(4) tree_y_positions = [randint(100, 200) for i in range(number_of_trees)] tree_y_positions = reversed(sorted(tree_y_positions)) for y in tree_y_positions: x = randint(-200, 200) tree_size = 250 - y setup(x, y) left(90) draw_tree(tree_size) input(\u0026#34;Press enter to continue...\u0026#34;) if TEST_PART_C: draw_forest(10)     A. Code blocks Before we can talk about functions, we need to talk about code blocks. A code block is one or more lines of code. Here\u0026rsquo;s one:\nforward(100) right(90) Sometimes we want to talk about how many times a code block should run, or whether it should run at all. Consider this code, which will draw a square:\nfor each_side in range(4): forward(100) right(90) We have the same code block, but now it\u0026rsquo;s indented under the condition for each_side in range(4):. This means the code block should run once for each item in the range. A few things to note:\n Whenever a code block is indented, there\u0026rsquo;s always a line introducing it. This line always ends with a colon. The way you indent matters. Always use the tab key to indent. When you\u0026rsquo;re done with a code block, just stop indenting.  There are also if code blocks, which say the code should only run if some condition is true. (And you can add an else code block for what to do if the condition is not true.)\nif 1 + 1 == 3: print(\u0026#34;Your computer has a serious problem.\u0026#34;) else: print(\u0026#34;All is well.\u0026#34;) Now look at Part A in the starter code. There is a code block inside another code block (a double-indent). Run the code. Work with your table group to figure out what part A does and how it works.\nCheckpoint: When you are sure everyone at your table understands code blocks, and can explain Part A, raise your hand.  B. Functions OK, that\u0026rsquo;s enough guessing for now. Set ASK_FOR_PASSWORD = False so that the program no longer asks for your password. Also, set TEST_PART_B = True.\nWhen you define a function, you are giving a name (setup) to a code block. Then you can tell the computer to run the code block by calling it by its name (setup(100, 200)). Think of it as teaching a new word to the computer. It lets you talk about new ideas. You already saw a function, in today\u0026rsquo;s homework:\ndef setup(x, y): \u0026#34;Sets up the turtle, ready to draw, at the given coordinates\u0026#34; penup() goto(x, y) pendown() setheading(0) A few things to note:\n The structure of the function definition looks a lot like a for-loop. There\u0026rsquo;s an introduction line ending in a colon, and then an indented code block. The def keyword tells the computer you\u0026rsquo;re defining a new function. The function\u0026rsquo;s name, setup, comes right after def. Here are some examples of good function names: draw_circle, draw_house, draw_background_with_clouds. You could call a function x but you\u0026rsquo;ll regret it :) After the function\u0026rsquo;s name is the list of arguments, surrounded by parentheses (x, y). Arguments are the things you need to tell the program before you can use the function. Think of arguments as questions the program might ask about what to do. For setup, the program wants to know \u0026ldquo;Where should we set up?\u0026rdquo; and you have to tell it the x- and y-coordinates. Some functions won\u0026rsquo;t have any arguments, so their arguments list will look like (). It depends how you design your functions. The first line of the function\u0026rsquo;s code block should be a string explaining what the function does. In the function\u0026rsquo;s code block, you can use the arguments as variables.  One reason to write functions is to make your code simpler. Instead of writing all the code for a square over and over, you can get it right once and put it in a function.\nLet\u0026rsquo;s practice writing some functions. Fill in the code blocks for the functions in part B. If you succeed, you\u0026rsquo;ll get the image below:\n  test_part_b() output    Set TEST_PART_B = False and TEST_PART_C = True.\nCheckpoint: When you are sure everyone at your table understands and can explain Part B, raise your hand.  C. Combining functions When you want to draw something fancy, you need to break it down into smaller steps. Then you can write functions to do the smaller steps, and write more functions to combine small steps into bigger steps. The code in part C illustrates this. If we want to draw a random forest like the one below, we can break it down into steps:\n Draw a forest  Draw a tree  Draw branches (we\u0026rsquo;ll use triangle) Draw the trunk (we\u0026rsquo;ll use rectangle) Move around (we\u0026rsquo;ll use fly)      Your job is to write rectangle and fly.\n  draw_forest(10) output    Deliverables  Each student should turn in lab_03.py at the end of class.  "});index.add({'id':17,'href':'/making-with-code/practices/people/funds_of_knowledge/','title':"Funds of Knowledge",'content':"Funds of Knowledge Explain how connected learning is related here...  Funds of knowledge refers to the idea that we will look at students as having lots of resources they can deploy in their learning (rather than viewing them in terms of their deficits). This also means we need to let go of the idea that we’re solely in the position of determining what’s worthwhile in CS. Our students are going to create things that are worthwhile and successful on their terms, not ours. We are going to support them, while also being warmly demanding. This is not a radical proposition, especially in CS: It’s such a new field that nobody really knows what CS is or what its boundaries are. If we’re finding ways of working that are effective, thinking about ideas that feel powerful, and making things that feel like they matter, then we’re doing the right thing.\n"});index.add({'id':18,'href':'/making-with-code/practices/tools/git/','title':"Git",'content':"Git GitHub "});index.add({'id':19,'href':'/making-with-code/practices/people/groupwork/','title':"Groupwork",'content':" Include concepts from \"Students As Teachers and Communicators\" from Handbook of CS Ed Research.  Groupwork  Groupwork: Small groups are an important context for high-quality disciplinary talk. When students get to choose their groups, they can take advantage of existing social relationships. However, this can create in equities (the strongest students cluster together) and can also bring social tensions into the classroom.  Our recommendation is to always assign seats and groups, change groups regularly (perhaps every unit), and allow students some private input (eg “I really don’t get along with X”).    "});index.add({'id':20,'href':'/making-with-code/practices/activity/help_queue/','title':"Help Queue",'content':"Help Queue  Getting help: When working on individual projects and on problem sets, students will often need help from teachers. It is important to create structures to allocate teacher time so that pushier students can’t dominate, and to build a culture where it’s a good thing to be stuck, to need help, and to seek help.  One useful tool is the help queue, simply a list on the whiteboard where people can sign up if they need help. All the people sign up at the beginning of class get helped in a random order (to prevent a rush). Respect the queue. Encourage students to seek help from peers. And to look for help online. In particular, it’s not OK to sit idly waiting for help from a teacher. When many students are having the same issue, it may be time to schedule a mini-lesson, 10 or 15 minutes dedicated to working an example to address the issue in a side part of the classroom. All students would be invited (but generally not required to attend). This would generally take priority over helping individuals, since it can help many people at once. When a student is really struggling and needs ongoing support, it can be helpful to break things down into small tasks, help the student get to the point where she can tackle one, and then say, “It looks like you can do this part. Can I go help somebody else and then check back in with you in five minutes?” Make sure you do! Github issues will make it easier to create a practice of identifying problems and asking for help offline. This could be productively combined with office hours. If this turns out to be helpful, it could be nice to occasionally make this work visible in class, for example by starting class off by presenting an interesting bug. (Some students will be much more comfortable asking for this kind of help; when they see that others are doing so, it can help them to also ask for help.) Stanford CS TA’s often had a practice of not looking at students’ code (they wanted to help debug thinking, not code). We believe this is not a helpful stance for supporting beginners.    "});index.add({'id':21,'href':'/making-with-code/courses/cs9/unit00/lessons/lesson00/','title':"Lesson 00.00",'content':" This is a note for developers, using the devnote shortcode.   Terminal Adventure Lab In this lab, we are going to practice using the Terminal.\n Setup ↕  Open a new Terminal window and enter the following commands (Don\u0026rsquo;t type the $.):\n$ cd Destop/cs9/unit_00 $ git clone https://github.com/the-isf-academy/lab_00_terminal_adventure.git $ ls lab_00_terminal_adventure\t$ cd lab_00_terminal_adventure You just copied some code from GitHub onto your computer. Let\u0026rsquo;s have a look:\n$ ls adventure\treturnToShip.py returnToShip.py is a runnable Python file (you can tell by the .py at the end). Run it to see what happens:\n$ python returnToShip.py Your adventure has only just begun. You are not yet ready to return to the ship. More secrets await you in the ocean\u0026#39;s depths. Today, you will use Terminal to explore the contents of the adventure directory.\n    Adventure ↕  Your challenge is to see if you can get the treasure, using just the Terminal. To get started, let\u0026rsquo;s go into the adventure directory:\n$ cd adventure $ ls seafloor\tsinking.txt sinking.txt is a text file, so we can read it. Try using the cat command:\n$ cat sinking.txt You will end by running returnToShip.py in the lab_00_terminal_adventure directory.\nBelow are some Terminal commands which might come in handy on your adventure.\n    Terminal commands    Command What it does     ls List what\u0026rsquo;s in the current directory.   cd ~ Go to your home directory   cd somewhere Go to somewhere   cd .. Go to the parent directory   open file.txt Opens file.txt with its default program   cat file.txt Prints out the contents of file.txt   python x.py Runs the Python program x.py   mv old.txt new.txt Renames a file from old.txt to new.txt. Also works for directories.   mv file.txt dir Moves a file to directory dir.   mv dir1 dir2 Moves dir1 to dir2 or renames if dir2 doesn\u0026rsquo;t exist.   cp old.txt new.txt Copy a file from old.txt to new.txt.   mkdir bag Creates a new directory called bag   pwd Prints the path to where you are in the filesystem   rm file.txt removes (deletes) the file file.txt   rm -d dir removes (deletes) the directory dir   rm -r dir recursively removes (deletes) the directory dir and all subdirectories and files within that directory. Be careful, this is a powerful tool!    More terminal commands These are just for fun. There\u0026rsquo;s lots more\u0026ndash;ask your teachers!\n   Command What it does     say hello Makes the computer say hello (Mac only)   cat sinking.txt | say Makes the computer read the text file aloud   cal Shows you a monthly calendar   banner hello Just try it    Terminal Practice Homework  Part 0 (20 minutes) ↕  Create your own Terminal Adventure game with directories and text files. Start by navigating to your Unit 00 directory and creating a new directory to hold your adventure. This directory should be called homework_02:\n~$ cd Desktop/cs9/unit_00/ ~/Desktop/cs9/unit_00$ mkdir homework_02 ~/Desktop/cs9/unit_00$ cd homework_02  Now you can create directories (using mkdir moon_base) and you can add text files (using atom space_station.txt). Your adventure should have at least three directories and three text files; you may add as many as you want. (The Terminal commands you learned during the Terminal adventure might be useful.)\nHow to turn in your adventure When you finish, you will turn your adventure in to Moodle. First, though, we need to zip up all these directories and files into a single file. We\u0026rsquo;ll use a program called tar to do this. (tar stands for \u0026ldquo;tape archive\u0026rdquo; because it was originally used to create backups to be stored on magnetip tape!) Make sure you are in the unit_00 directory.\n~/Desktop/cs9/unit_00$ ls homework_01.py\thomework_02 ~/Desktop/cs9/unit_00$ tar -czf homework_02.zip homework_02 ~/Desktop/cs9/unit_00$ ls homework_01.py\thomework_02\thomework_02.zip  Now you can turn in homework_02.zip, and your teachers will be able to unzip it to play your adventure.\n    Part 1 (10 minutes) ↕  This part should take about 10 minutes\nTeach somebody else how to play your Terminal Adventure game. This could be a parent, grandparent, sibling, or friend\u0026ndash;anyone you want.\nYou will have to write a short reflection during class about your experience teaching as a computer scientist.\n   Deliverables  A zip file containing at least three directories and at least three text files, submitted to Moodle. A player should experience some kind of game or story when navigating these directories and text files.  "});index.add({'id':22,'href':'/making-with-code/courses/cs9/unit00/modules/lab_loops/','title':"Loops Lab",'content':"Loops Lab In this lab, we will learn how to make the computer do the same instruction over and over.\nThe Python shell Usually, we write Python code in a file using Atom and then run it using Terminal. There\u0026rsquo;s another way to run Python, which is really nice for when you just want to mess around or do a quick test. Open Terminal, navigate to your computer science directory and type python.\n~$ cd Desktop/cs9 ~/Desktop/cs9$ python Python 3.7.3 (default, Mar 27 2019, 09:23:15) [Clang 10.0.1 (clang-1001.0.46.3)] on darwin Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; See how the prompt changed to \u0026gt;\u0026gt;\u0026gt;? That tells you you\u0026rsquo;re in Python world. You can type Python code here and it will run. Let\u0026rsquo;s try it out. Type the following, and make sure you get the same response.\n\u0026gt;\u0026gt;\u0026gt; 1+1 2 \u0026gt;\u0026gt;\u0026gt; 123456 + 654321 777777 \u0026gt;\u0026gt;\u0026gt; number = 5 \u0026gt;\u0026gt;\u0026gt; number * number 25 \u0026gt;\u0026gt;\u0026gt; \u0026#34;I am \u0026#34; + \u0026#34;a robot\u0026#34; \u0026#39;I am a robot\u0026#39; \u0026gt;\u0026gt;\u0026gt; exit() ~/Desktop/cs9$ Once you exit the Python shell, all your work is lost. So it\u0026rsquo;s not a good way to do serious work, but it works great as a fancy calculator.\n\u0026gt;\u0026gt;\u0026gt; 1+1 2 \u0026gt;\u0026gt;\u0026gt; 123456 + 654321 777777 CHECKPOINT: Stop here and make sure everyone in your group has finished this section before you go on. Raise your hand and check in with an instructor before you move on.  Variables You are probably familiar with variables in math. (\u0026ldquo;Solve for x: 2x + 4 = 3x\u0026rdquo;) In math problems, the goal is often to figure out the secret value of a variable. Once you figure it out, the problem is finished. Variables work differently in computer science:\n You can create them whenever you want. In fact, you already made one. Remember typing number = 5 above? You made a variable called \u0026ldquo;number\u0026rdquo; and set its value to 5. In computer science, you get to decide what value variables have, and you can change them whenever you want. Try this:  \u0026gt;\u0026gt;\u0026gt; name = \u0026#34;Elton\u0026#34; \u0026gt;\u0026gt;\u0026gt; \u0026#34;my name is \u0026#34; + name  You can call them whatever you want (no spaces though!) In math, variables have names like x, y, and t. In computer science, we usually call them things like number_of_coins_in_my_hand or direction_my_character_is_facing because it\u0026rsquo;s less confusing.  We\u0026rsquo;re going to learn a lot about variables this year, but that\u0026rsquo;s enough for now.\n Lists Create a new file called lab_02.py in atom (This should be at ~/Desktop/cs9/unit_00/lab_02.py.) You\u0026rsquo;ll be turning in this file at the end of the lab. Copy this starter code:\n# Unit 0 Lab 2 # Author: Your Name from turtle import * #VARIABLES my_name = \u0026#34;\u0026#34; friend_name = \u0026#34;\u0026#34; meme_list = [\u0026#34;creeper?\u0026#34;,\u0026#34;aw man\u0026#34;] cs1_dessert_list = [\u0026#34;ice cream\u0026#34;, \u0026#34;brownies\u0026#34;, \u0026#34;mochi\u0026#34;, \u0026#34;timtams\u0026#34;, \u0026#34;creme brulee\u0026#34;, \u0026#34;mango sago\u0026#34;, \u0026#34;pumpkin pie\u0026#34;, \u0026#34;tiramisu\u0026#34;, \u0026#34;cheesecake\u0026#34;] metro_stop_list = [\u0026#34;0 Kennedy Town\u0026#34;, \u0026#34;1. HKU\u0026#34;, \u0026#34;2.. Sai Ying Pun\u0026#34;, \u0026#34;3... Sheung Wan\u0026#34;, \u0026#34;4.... Central\u0026#34;, \u0026#34;5..... Admiralty\u0026#34;, \u0026#34;6...... Wan Chai\u0026#34;] star_list = [\u0026#34;*\u0026#34;, \u0026#34;**\u0026#34;, \u0026#34;***\u0026#34;, \u0026#34;****\u0026#34;, \u0026#34;*****\u0026#34;] # LIST EXPERIMENTS print(\u0026#34;help! I am trapped inside the computer!\u0026#34;) # LOOPING THROUGH A LIST # YOUR CODE HERE (A) # LOOPING THROUGH PART OF A LIST # YOUR CODE HERE (B) # LOOPING WITH STEPS # YOU WILL PASTE C, D, E HERE # LOOPING FOR A CERTAIN NUMBER OF TIMES # YOUR CODE HERE (F) # LOOPY DRAWINGS # YOUR CODE HERE (G) # VARIABLE DRAWINGS # YOUR CODE HERE (H) We\u0026rsquo;ve created a ton of variables here, except this time they\u0026rsquo;re in a file so we won\u0026rsquo;t lose them after we run the program. Try running the program.\n~/Desktop/cs9/unit_01$ python lab_02.py help! I am trapped inside the computer! ~/Desktop/cs9/unit_01$ What is a list? When you want to know what something is (inside a computer program), ask the program to print it out. Before we start, change the value of the variables my_name and friend_name to anything you want. Something like\n#VARIABLES my_name = \u0026#34;Wall-E\u0026#34; friend_name = \u0026#34;Eva\u0026#34; The program currently prints out \u0026quot;help! I am trapped inside the computer!\u0026quot;. Replace that string with the following objects one at a time. For each one, save your program and run it to see what the object is.\n\u0026quot;hello\u0026quot; goodbye (This will cause an error. See if you can understand the error message.) my_name \u0026quot;hello, \u0026quot; + my_name meme_list cs1_dessert_list cs1_dessert_list[0] cs1_dessert_list[1] cs1_dessert_list[2] cs1_dessert_list[100] (Another error. Why?) my_name + \u0026quot; likes to eat \u0026quot; + cs1_dessert_list[0] + \u0026quot; but \u0026quot; + friend_name + \u0026quot; likes to eat \u0026quot; + cs1_dessert_list[1]  What\u0026rsquo;s going on? Once you finish running all these examples, talk with your table group to explain what each one means. Here are some terms:\n A list is a collection of elements in order. When you write down a list, you use brackets on either end, and commas in between. Like this: [100, 200, 400, 800]. Each list element has an index. The first element\u0026rsquo;s index is 0, the second\u0026rsquo;s is 1, and so on. You can get a list element by using its index, like this:  \u0026gt;\u0026gt;\u0026gt; meme_list[0] creeper? \u0026gt;\u0026gt;\u0026gt; CHECKPOINT: When you are confident that everybody at your table can explain lists, raise your hand for an instructor to check in before you go on.  Loops In Python, when you want to run the same code multiple times, we use loops. If you have used Scratch before, you have seen loops before:\n  Scratch loop   How does a loop work in python? Let\u0026rsquo;s see. Do these and check with your group if you get stuck:\nA. Looping through an entire list  Let\u0026rsquo;s print the desserts one by one. Type this starter code at YOUR CODE HERE (A). Don\u0026rsquo;t copy paste so you can practice typing the code! Also note the indents.  # LOOPING THROUGH A LIST print(\u0026#34;Mr. Wolf, Ms. Han, and Mr. Ng go to the store for dessert. They decide to buy...\u0026#34;) for thing in cs1_dessert_list: print(thing) In this loop, thing is a variable that we use to store each element within cs1_desserts as we loop through one by one.   thing is not a very descriptive variable name - there are lots of things in the world. How will we know what thing the variable is storing? Try changing thing to a more descriptive word in both lines, like sweet or dessert_item and see if the output changes.  Alright! Now you try. There\u0026rsquo;s a list called stars. Print every element in star_list using a for-loop.  B. Looping through part of a list To give you more options, you can specify a range for your for-loop.\n Type this code at YOUR CODE HERE (B) (don\u0026rsquo;t copy paste, so you can practice typing).  # LOOPING THROUGH PART OF A LIST print(\u0026#34;But then they realized they ran out of money, so they can only buy 4 desserts. They decide to buy...\u0026#34;) for i in range(1, 6): print(cs1_dessert_list[i]) Oops! This code has an error!   The first four desserts in the cs1_dessert_list list are ice cream, brownies, mochi, and timtams. But our code prints out brownies, mochi, timtams, creme brulee, and mango sago. Change the code to print out the first 4 desserts only.  C,D,E. Looping with steps Copy-paste this code into the file, replacing the line that says, YOU WILL PASTE C, D, E HERE.\nprint(my_name + \u0026#34; stepped on the MTR after school, exhausted, and quickly fell asleep at a seat. Usually, the train stops at:\u0026#34;) # YOUR CODE HERE (C) print(\u0026#34;But on this particular afternoon, \u0026#34; + friend_name + \u0026#34; had hacked into the train system. The MTR was going twice as fast, and stopping at:\u0026#34;) # YOUR CODE HERE (D) print(\u0026#34;DING DONG!\u0026#34;) print(\u0026#34;PLEASE STAND BACK FROM THE TRAIN DOORS.\u0026#34;) print(\u0026#34;All of a sudden, \u0026#34; + my_name + \u0026#34; realized they had missed their stop! They leapt out of the train and got on in the other direction.\u0026#34;) # YOUR CODE HERE (E)  In part C, write a for loop to print all the stops starting with Kennedy Town and ending with Wan Chai, using range. Sometimes you need even more options. Maybe you want to print every other element. That\u0026rsquo;s where the step feature comes in. Your code for part C should look something like:  for i in range(NUMBER1, NUMBER2): print(SOMETHING) In part D, use the same code as C, but add another argument to range:\nfor i in range(NUMBER1, NUMBER2, 2): print(SOMETHING) range() can work with two arguments (start, stop) or with three (start, stop, step). If you only give two arguments, step is automatically set to one, and the for loop moves through the range one step at a time. By setting the step to 2, we tell the range() function to take two steps at a time.\n You can also use the step and range() together to go through a list in the backwards direction. Just change the step argument to -1. Now, the range() function will walk through the range negative one step at a time. In part E, write a for loop to print all the stops starting with Wan Chai and ending with Sheung Wan.\nHint: you will also need to update the start/end argument of the range() function to account for the negative one step.\n  F. Looping for a certain number of times Sometimes you don\u0026rsquo;t care about the list value. You just want something to happen a certain number of times. Here\u0026rsquo;s an example using range. Type this code (don\u0026rsquo;t copy paste, so you can practice typing) into part F\n# LOOPING FOR A CERTAIN NUMBER OF TIMES for i in range(0, 5): print(\u0026#34;hello\u0026#34;) Can you print this pattern using loops? There are multiple ways to do this, with or without lists. Add this to part F.\n* * * * * * * * * * * * * * * * * * * * * * * * * G. Loopy drawings The loop concept we just learned will be really helpful in making our drawings more complex. In part G, try to create the following image using tools from the Turtle library that we\u0026rsquo;ve covered so far.\n  Turtle loop   H. Variable drawings Variables will also be useful in our Turtle drawings. Can you add a variable to the code you wrote for the drawing above to create the drawing below?\n  Turtle var   Deliverables  Once you\u0026rsquo;ve reached the end of the lab (or class time is over), please submit the lab_02.py file you have been creating Each member of your group should submit their own file. You will get credit even if you don\u0026rsquo;t finish parts A-G.  "});index.add({'id':23,'href':'/making-with-code/courses/cs9/unit00/modules/lab_modules/','title':"Modules Lab",'content':"Modules Lab Replace the ISF Academy repo links  We are going to write a lot of code this year, so we need to keep it organized. The most obvious way to do this is to store code in different files. But what if you want to re-use a function you wrote in a different file? Copy it over? It feels like there should be a better way. Today we are going to learn how to import code from one module into another. But first, let\u0026rsquo;s get some vocabulary straight:\n All python code lives in files that end in .py. They\u0026rsquo;re just plain text files that you can edit using Atom (or Microsoft Word if you really want. Don\u0026rsquo;t though. You\u0026rsquo;ll regret it.) Like all files, python files live in directories somewhere on your file system. For example, all your homework lives in /Users/you/Desktop/cs9/unit_00. Python thinks of each file as a module. Each module is its own little bubble world. Python thinks of each directory containing .py files as a package. A package is a bundle of modules. So your unit_00 directory is also a package.  A. Importing When you want to use something from another module, you need to import it. We have actually already been doing this\u0026ndash;every one of our programs so far has started with from turtle import *. But what is this turtle? Where did it come from? Let\u0026rsquo;s use the python shell to find out:\nTEA-JWOLF:~ jwolf$ cd Destop/cs9/unit_00 TEA-JWOLF:unit_00 jwolf$ python \u0026gt;\u0026gt;\u0026gt; import turtle \u0026gt;\u0026gt;\u0026gt; turtle \u0026lt;module \u0026#39;turtle\u0026#39; from \u0026#39;.../turtle.py\u0026#39;\u0026gt; See? It\u0026rsquo;s a module! And it lives in a file called turtle.py that some people wrote for you.\n\u0026gt;\u0026gt;\u0026gt; turtle.forward \u0026lt;function forward at 0x102f90d08\u0026gt; There\u0026rsquo;s our old friend forward, the function which makes the turtle walk forward. You can use it just like normal:\n\u0026gt;\u0026gt;\u0026gt; turtle.forward(100) There are actually three different ways to get forward. You can import turtle:\nimport turtle turtle.forward(100) Or you can import forward from turtle:\nfrom turtle import forward forward(100) Or You can do it the way you are used to doing it:\nfrom turtle import * forward(100) This third way means \u0026ldquo;go into the turtle module and import everything!\u0026rdquo; It\u0026rsquo;s quick and easy, but it\u0026rsquo;s kind of sloppy and it\u0026rsquo;s not always a very good idea. Imagine this scenario:\nfrom bodily_functions import eat from refrigerator import * from trash_can import * eat(chicken_sandwich) You can see that the eat function came from bodily_functions, but where did that chicken_sandwich come from? The refrigerator? Or the trash_can? By importing just what we need from other modules, we can make it clear where everything came from, and we can make sure we don\u0026rsquo;t import stuff we don\u0026rsquo;t want. (What else did we import from the trash_can? Do we want that in our program?)\nSTOP! Before you go on, figure out how to open turtle.py. Have a look inside and show it to your teacher.\nB. Finding modules There are three places you can import modules from:\n Some modules, like turtle, come pre-installed with python. When you import them, python knows where to find them. Some modules were published online by other software developers. If you install them, you can use them too. Like the built-in modules, python knows where to find these when you import them. Finally, any modules that are in the same directory as your python file can be imported.  Now let\u0026rsquo;s try importing some of the code you wrote in previous lessons. Let\u0026rsquo;s use a tool called tree to see what we\u0026rsquo;re dealing with. tree doesn\u0026rsquo;t come built-in, so let\u0026rsquo;s install it now:\n** Don\u0026rsquo;t forget to exit the Python shell before entering this command! Check to make sure you see the command line prompt!**\nTEA-JWOLF:unit_00 jwolf$ brew install tree Now, let\u0026rsquo;s have a look at all your work in this class so far. We\u0026rsquo;re going to show a tree of ., which means \u0026ldquo;here\u0026rdquo; (whatever directory you\u0026rsquo;re currently in).\nTEA-JWOLF:unit_00 jwolf$ tree . . ├── homework_01.py ├── homework_02 │ └── zoo │ ├── elephant_house │ │ └── meet_the_elephants.txt │ ├── entrance.txt │ └── snake_house │ └── meet_the_snakes.txt ├── homework_03.py ├── homework_04.py ├── lab_00_terminal_adventure │ ├── adventure │ │ ├── seafloor │ │ │ ├── coral_reef │ │ │ │ ├── chest.py │ │ │ │ ├── reef.txt │ │ │ │ └── treasure.png │ │ │ ├── seafloor.txt │ │ │ └── sunken_ship │ │ │ ├── galley │ │ │ │ └── ghost.py │ │ │ ├── ship.txt │ │ │ └── stateroom │ │ │ └── desk.py │ │ └── sinking.txt │ └── end.py ├── lab_02.py └── lab_03.py From the unit_00 folder, we can import any of these .py files as modules. If they\u0026rsquo;re in the same directory (like homework_01.py), we can just write import homework_01. Try it now:\nTEA-JWOLF:unit_00 jwolf$ python \u0026gt;\u0026gt;\u0026gt; import homework_01 Fond memories. You should have seen your homework 1 run again. This is because when you import a module, all the code in that module runs. What about subdirectories that contain .py files? Python thinks of these as packages. Remember that treasure chest from the Terminal Adventure Lab ? It\u0026rsquo;s buried a few layers deep in packages, but we can get it.\n\u0026gt;\u0026gt;\u0026gt; import lab_00_terminal_adventure.adventure.seafloor.coral_reef.chest Usually we use packages to group together code that belongs together.\nNow we are going to download a package full of fancy drawing functions to turbocharge your turtle. Make sure you are inunit_00 and then download it using git:\nTEA-JWOLF:unit_00 jwolf$ git clone https://github.com/the-isf-academy/drawing.git You just downloaded a package called drawing. Let\u0026rsquo;s learn about what\u0026rsquo;s included. Run tree drawing to see what\u0026rsquo;s inside.\nSTOP! Once you have downloaded the drawing package and are confident that everyone in your group understands modules and packages, check in with a teacher.\nC. Fancy drawings Then read the package documentation, which describes all the functions.\nCreate a file called lab_04.py in unit_00. Work with your group to try out the examples from the drawing documentation, and see what else you can figure out. You will turn this file in at the end of class. (You may look at each others\u0026rsquo; code and write code together during labs. But remember, you may never look at someone else\u0026rsquo;s homework code or show someone yours.)\nYou might also be interested in reading the documentation for turtle to see what other drawing functions are available.\nDeliverables  By the end of class, each student should upload a file called lab_04.py. This file should make a drawing using functions from the drawing package.  "});index.add({'id':24,'href':'/making-with-code/practices/people/','title':"People",'content':"People "});index.add({'id':25,'href':'/making-with-code/practices/place/','title':"Place",'content':"Place "});index.add({'id':26,'href':'/making-with-code/practices/activity/projects/','title':"Projects",'content':"Projects One primary structure in the course will be open-ended projects. The initial units will provide scaffolding, supporting students in designing and implementing projects. Later in the year, students will design their own projects independently.\nWe ought to name the overall teaching philosophy as constructionism, but also explain how the project-based approach makes sense within POGIL and within computational action.  "});index.add({'id':27,'href':'/making-with-code/dev/structure/','title':"Structure",'content':"Structure Making with Code is organized into courses, units, and lessons. Courses are the highest-level container for content. They contain one or more units. Units are clusters of content organized around essential questions, providing materials to orchestrate student learning for 1-2 months. Lessons are the finest level of organization, representing one class meeting. Lessons will be the hardest to adapt to different school schedules, so using lessons is optional. Courses and units are purely organizational structures, while lessons are also themselves a content type.\n  Organization of content   Content types The following content types are implemented. For each, ensure that type: contenttype is in the page\u0026rsquo;s front matter.\n course: Introduces a course. unit: Introduces a unit. lesson: Introduces a lesson and includes necessary modules. module: A chunk of content such as a handout, a homework assignment, a lab, or a set of slides. teaching: A pedagogical overview, introducing the content to a teacher preparing to use it. Each course, unit, lesson, and module may have teaching content. notes: Pedagogical details related to a specific implementation of the content.  Courses, units, and lessons are implemented in Hugo as branch bundles, which means each page is built from _index.html and it has access to all the other pages in its directory. Teaching and notes are implemented as pages within branch bundles.\nFile structure Here is an example file structure showing the various content types.\ncontent/ ├── _index.md └── courses └── cs9 ├── _index.md ├── notes.md ├── teaching.md └── unit00 ├── _index.md ├── lessons │ ├── _index.md │ └── lesson00 │ ├── _index.md │ ├── notes.md │ └── teaching.md ├── modules │ ├── _index.md │ ├── hw_terminal_practice │ │ └── _index.md │ └── lab_terminal_adventure │ └── _index.md ├── notes.md └── teaching.md "});index.add({'id':28,'href':'/making-with-code/dev/syntax/','title':"Syntax",'content':"Syntax Making with Code is a static site built with Hugo. You will need to understand the basics of the Hugo framework to contribute. Content is written in markdown, which you can probably pick up just by looking at some of the existing content.\nCustom Shortcodes include_module Includes the full content of a module (from the same unit) in a lesson.\n{{\u0026lt; include_module \u0026quot;lab_terminal_adventure\u0026quot; \u0026gt;}} ref_module Creates a link to a module (from the same unit) in a lesson.\n{{\u0026lt; ref_module \u0026quot;lab_terminal_adventure\u0026quot; \u0026gt;}} ref_practice Creates a link to a practice description. May be used on any content page.\n{{\u0026lt; ref_practice \u0026quot;activity/help_queue\u0026quot; \u0026gt;}} devnote Use for notes and TODO items. Content within devnote is highlighted and only shown in the dev environment.\n{{\u0026lt; devnote \u0026gt;}} This lesson went horribly. Need to revise. {{\u0026lt; /devnote \u0026gt;}} "});index.add({'id':29,'href':'/making-with-code/courses/cs9/teaching/','title':"Teaching",'content':"Introduction This is a 9th grade constructionist computer science course. The central goal is to create a rich, diverse community of people making things with code, through which they can develop personal relationships with powerful ideas. The course is designed to help all students learn to interact with code as an expressive, evocative medium, which helps to structure thought. At the same time, the course is designed to support computational literacy, connecting with students’ existing ways of reading and writing. We consider computational thinking as thinking with code.\nThe course is guided by several core beliefs about learning:\n Knowledge is constructed, not transferred. Every learner builds knowledge anew. Knowledge-building is social and grounded in people, places, and materials. At its heart, computer science is about getting to know powerful ideas. This happens best when working on projects that matter to you and your peers.  Course goals This course is designed for students who have no prior formal exposure to computer science, but who have substantial experience with computing in and out of school. The course is expected to be part of a grade 9-12 sequence, culminating in IB computer science exams and preparation for participation in university-level computer science for students who choose to continue study.\nThe course goals are aligned with the CSTA 2017 Standards, which are in turn based on the K12 CS Framework. The K12 CS Framework articulates high-level concepts and practices for primary and secondary computer science; the CSTA 2017 standards articulate grade-level criteria for the concepts and practices. The course does not align strictly to CSTA 2017 Level 3A (grades 9-10) because those standards assume students have previously been learning the earlier standards.\n"});index.add({'id':30,'href':'/making-with-code/courses/cs9/unit00/lessons/lesson00/teaching/','title':"Teaching",'content':"Lesson 0 - Welcome to Computer Science The purpose of the first lesson is to introduce students to the goals, structures, and norms of the course. By the end of Lesson 0.0, students should have a sense for what the course is about as well as a fun initial experience making with code.\nWe will introduce the Help Queue . (This is just a test of the ref_practice shortcode. Should it embed content or link out to it?)\n"});index.add({'id':31,'href':'/making-with-code/courses/cs9/unit00/lessons/lesson00/notes/','title':"Teaching notes",'content':"Lesson 0.0 Example schedule  Before class [15 minutes before]  Set up into table groups, have name tags ready for students, physical journal Set up ppt Set up warmup Post it notes Bring some extension cords Play music Write agenda on board     Do Now (5 min) Basic configuration (10 min) Intro to writing code (10 min) Make a drawing (20 min) Put computers away + break (5 min) Intro to CS (5 min) Course Overview/Syllabus (10 min) Norms (10 min) Homework for next class and Questions (3 min) Summary of lesson (2 min)  Norms When students come into the room, it should be configured in a manner suitable for informal working\u0026ndash;ideally small clusters of 4 (so they can break out into pairs or have small discussions). Keep in mind that round tables aren’t always ideal for collaboration because you can’t see one another’s screens. Also keep in mind that people will need access to power to charge their computers. There should be assigned seats so that everyone knows where to go.\n There will always be a do now; you should come in and get started. How you interrupt workflow to make an announcement  “And a hush fell over the crowd…” \u0026lsquo;Raise hand silently\u0026rsquo;   How students get help.  Do now On 3 different post it notes, jot* your ideas down:\n What do you expect CS to be? What are you looking forward to? What do you hope to learn?  Opening discussion Do now discussion: How will you ask students to share? One strategy that can work well is to always have a norm of asking table groups to share amongst themselves, and then call on students to share (not those with hands raised). That way, everybody is expected to be ready to share (after having a chance to prepare with peers), and nobody gets to dominate classroom airtime. I’d suggest you just choose something for now, and then we can reflect on it together.\nWhat do you expect CS to be? What are you looking forward to? What do you hope to learn?\nBasic configuration There should be a script on the website; everyone should work together to follow it.\nInto the Terminal Via a live demo, show students how to edit code with Sublime Text, how to run it in Terminal, and how to see the code run in the Turtle execution window. Practice editing code, saving, running, seeing the result. For now, we’ll be firmly in an imperative programming style: we think of code as giving instructions to the computer. This is the nice thing about the Turtle library: instructions generally have visible effects.\nIteratively build up a small drawing, taking suggestions from the class. Don’t use anything fancy! Let students see you making mistakes. Narrate what’s happening in your head. Be explicit about when students should be watching you and getting ready to participate in answering questions, and when they should be following along on their computers.\nNote that the install script is going to edit ~/.bash_profile to automatically activate the course venv. We won’t even mention this for now.\nBe sure to mention:\n Every file has a path.  Later, we’ll introduce navigation via Terminal. For now, you can grab the thumbnail icon in the header of the Sublime Text window and drag it onto Terminal to get the file path. Unfortunately, MacOS discourages people from thinking about filesystems. Some students probably only access files via Spotlight.   To run the same file again in Terminal, just press the up arrow. For now, the only mode we’ll use to run Python is python filename. No REPL. Show what happens when you make an error. Distinguish between syntax errors, which crash the program, and programmatic errors, when the program does something different than you wanted. Point out why we need input(“Press enter to continue…”) at the end of the program.  A short Quicktime video introduction showing how to manage all the windows, using the ISF computer configuration,might be really helpful.\nMake a drawing Ask students to work in their groups to make a drawing. Provide paper to make a sketch first. They may work in pairs or individually as they prefer. This could become their homework, so everyone should be writing code.\nIntroduce norms of getting help:\n If you get stuck, first see if you can figure out how to fix it by re-reading what you’ve done and the error message. Ask for help at your table group. If that didn’t work, get help from a teacher by signing up on the help queue. Don’t just sit there while you’re waiting! See if you can figure out the problem using our debugging strategies (on the wall?)  Course intro Quick overview of the course. They’re going to want to spend lots of time asking questions about grades, etc. Emphasize that this is a different kind of course. It’s going to be about making things with code.\nHomework Show the homework and talk through what’s expected, including norms around putting in an honest effort and what happens if you get stuck. If there’s extra time, get started on the homework.\n"});index.add({'id':32,'href':'/making-with-code/courses/cs9/unit00/notes/','title':"Teaching notes (Hong Kong, 2019-2020)",'content':" 10 class meetings This initial unit prioritizes getting students making personally-meaningful things as fast as possible. This means we aren’t aiming for completeness. In particular, we’re not introducing variables or conditional control structures in this unit: most students won’t need them, and we’ll spend a lot of time with them in the next unit.  Problem sets Assign students to create various drawing primitives, and use them to build up more complex functions. Note: Require all primitives end with the turtle in the same state as when it started. This makes building up more complex routines much easier.\nLab Practice using pseudocode to plan algorithms. Use this method to write pseudocode (and then code) to generate complex puzzle pictures such as geometric designs, tessellations, and procedurally-generated patterns from nature.\nProject Create some personally-meaningful drawing. First, a draft will be due with a sketch of the final project and some planning, including planned subroutines and pseudocode. Use it to make something using the fablab. (eg: engrave your laptop, cut patterns in clothes, mill some useful shape.\nUnit Calendar Lesson 0: Introduction, turtle\nLesson 1: Loops / lists\nLesson 2: Functions\nLesson 3: Function library\nLesson 4: Lab - Complex drawing\nLesson 5: Complex drawing, introduction to debugging\nLesson 6: Working\nLesson 7: Working\nLesson 8: Working\nLesson 9: Working\n"});index.add({'id':33,'href':'/making-with-code/courses/cs9/unit00/modules/lab_terminal_adventure/','title':"Terminal Adventure Lab",'content':"Terminal Adventure Lab In this lab, we are going to practice using the Terminal.\n Setup ↕  Open a new Terminal window and enter the following commands (Don\u0026rsquo;t type the $.):\n$ cd Destop/cs9/unit_00 $ git clone https://github.com/the-isf-academy/lab_00_terminal_adventure.git $ ls lab_00_terminal_adventure\t$ cd lab_00_terminal_adventure You just copied some code from GitHub onto your computer. Let\u0026rsquo;s have a look:\n$ ls adventure\treturnToShip.py returnToShip.py is a runnable Python file (you can tell by the .py at the end). Run it to see what happens:\n$ python returnToShip.py Your adventure has only just begun. You are not yet ready to return to the ship. More secrets await you in the ocean\u0026#39;s depths. Today, you will use Terminal to explore the contents of the adventure directory.\n    Adventure ↕  Your challenge is to see if you can get the treasure, using just the Terminal. To get started, let\u0026rsquo;s go into the adventure directory:\n$ cd adventure $ ls seafloor\tsinking.txt sinking.txt is a text file, so we can read it. Try using the cat command:\n$ cat sinking.txt You will end by running returnToShip.py in the lab_00_terminal_adventure directory.\nBelow are some Terminal commands which might come in handy on your adventure.\n    Terminal commands    Command What it does     ls List what\u0026rsquo;s in the current directory.   cd ~ Go to your home directory   cd somewhere Go to somewhere   cd .. Go to the parent directory   open file.txt Opens file.txt with its default program   cat file.txt Prints out the contents of file.txt   python x.py Runs the Python program x.py   mv old.txt new.txt Renames a file from old.txt to new.txt. Also works for directories.   mv file.txt dir Moves a file to directory dir.   mv dir1 dir2 Moves dir1 to dir2 or renames if dir2 doesn\u0026rsquo;t exist.   cp old.txt new.txt Copy a file from old.txt to new.txt.   mkdir bag Creates a new directory called bag   pwd Prints the path to where you are in the filesystem   rm file.txt removes (deletes) the file file.txt   rm -d dir removes (deletes) the directory dir   rm -r dir recursively removes (deletes) the directory dir and all subdirectories and files within that directory. Be careful, this is a powerful tool!    More terminal commands These are just for fun. There\u0026rsquo;s lots more\u0026ndash;ask your teachers!\n   Command What it does     say hello Makes the computer say hello (Mac only)   cat sinking.txt | say Makes the computer read the text file aloud   cal Shows you a monthly calendar   banner hello Just try it    "});index.add({'id':34,'href':'/making-with-code/courses/cs9/unit00/modules/hw_terminal_practice/','title':"Terminal Practice Homework",'content':"Terminal Practice Homework  Part 0 (20 minutes) ↕  Create your own Terminal Adventure game with directories and text files. Start by navigating to your Unit 00 directory and creating a new directory to hold your adventure. This directory should be called homework_02:\n~$ cd Desktop/cs9/unit_00/ ~/Desktop/cs9/unit_00$ mkdir homework_02 ~/Desktop/cs9/unit_00$ cd homework_02  Now you can create directories (using mkdir moon_base) and you can add text files (using atom space_station.txt). Your adventure should have at least three directories and three text files; you may add as many as you want. (The Terminal commands you learned during the Terminal adventure might be useful.)\nHow to turn in your adventure When you finish, you will turn your adventure in to Moodle. First, though, we need to zip up all these directories and files into a single file. We\u0026rsquo;ll use a program called tar to do this. (tar stands for \u0026ldquo;tape archive\u0026rdquo; because it was originally used to create backups to be stored on magnetip tape!) Make sure you are in the unit_00 directory.\n~/Desktop/cs9/unit_00$ ls homework_01.py\thomework_02 ~/Desktop/cs9/unit_00$ tar -czf homework_02.zip homework_02 ~/Desktop/cs9/unit_00$ ls homework_01.py\thomework_02\thomework_02.zip  Now you can turn in homework_02.zip, and your teachers will be able to unzip it to play your adventure.\n    Part 1 (10 minutes) ↕  This part should take about 10 minutes\nTeach somebody else how to play your Terminal Adventure game. This could be a parent, grandparent, sibling, or friend\u0026ndash;anyone you want.\nYou will have to write a short reflection during class about your experience teaching as a computer scientist.\n   Deliverables  A zip file containing at least three directories and at least three text files, submitted to Moodle. A player should experience some kind of game or story when navigating these directories and text files.  "});index.add({'id':35,'href':'/making-with-code/practices/tools/','title':"Tools",'content':"Tools "});index.add({'id':36,'href':'/making-with-code/courses/cs9/unit00/','title':"Unit 00: Drawing",'content':"Problem sets Assign students to create various drawing primitives, and use them to build up more complex functions. Note: Require all primitives end with the turtle in the same state as when it started. This makes building up more complex routines much easier.\nLab Practice using pseudocode to plan algorithms. Use this method to write pseudocode (and then code) to generate complex puzzle pictures such as geometric designs, tessellations, and procedurally-generated patterns from nature.\nProject Create some personally-meaningful drawing. First, a draft will be due with a sketch of the final project and some planning, including planned subroutines and pseudocode. Use it to make something using the FabLab. (eg: engrave your laptop, cut patterns in clothes, mill some useful shape.\n"});index.add({'id':37,'href':'/making-with-code/courses/cs9/unit00/teaching/','title':"Unit 00: Teaching",'content':"Working within the context of drawing, students practice building up complex programs from simple ones. We’ll use Python’s turtle library, and use our exported SVGs to cut things on the laser cutter/cnc. Loosely inspired by Chris’s Python drawing unit from GMS (this links to the Scratch drawing assignment; further up on the page are lessons translating this into Python). Programming: Imperative programming; Basics of syntax; functions; decomposition and code reuse. Introductory debugging strategies.\n"});index.add({'id':38,'href':'/making-with-code/courses/cs9/unit00/modules/lab_git/','title':"Version Control Lab",'content':"Version Control Lab fix \"first day of class\" link, replace links to isf repo  Set up  Double-check that git is installed by running which git in Terminal. (We installed git on the first day of class.) You should see the path where git is installed. If you see nothing, check with a teacher. Configure git: Type each of these commands into Terminal.  git config --global user.name \u0026lt;Your name\u0026gt; git config --global user.email \u0026lt;Your school email\u0026gt; git config --global core.editor \u0026quot;atom --wait\u0026quot; git config --global commit.template .commit_template    Your first repo You have already cloned a few git repositories (remember typing git clone ...?) Cloning means pulling a copy of a repository down from github onto your own computer. Now we are going to take the next step, forking a repository (making your own copy) and adding to it.\nFrom now on, your homework, labs, and projects will be provided as git repositories. We are going to start now, by setting up your final project for this unit.\nJoin github Start by making a github account for yourself.\n Go to github.com. Enter a username, email address, and password.  Your username should not include your real name. Please use your school email account. Write your password down somewhere!   You should get a verification email. Click the link to prove it\u0026rsquo;s your email address.  Creating your fork Your teachers have already created a repository for the unit project. Each student is going to fork this repository, so they have their own copy.\n If you are in CS1, click this link If you are in CS2, click this link  Follow the instructions. Once your fork is created, you will get a link to your project. Click it and you should see a screen like the one below.\n  GitHub   Cloning your fork Now you are going to clone your repo, so there\u0026rsquo;s a copy on your computer. If you look at the following commands, you\u0026rsquo;ll see that the git clone command has a ******. You need to replace this with your repo\u0026rsquo;s URL, which you can get by clicking on the green \u0026ldquo;Clone or download\u0026rdquo; button.\ncd ~/Documents/cs9/unit_0/ git clone ****** Now you have a directory called ~/Documents/cs9/unit_0/unit-0-drawing-yourname. Let\u0026rsquo;s go into the project folder and have a look inside:\ncd unit-0-drawing-yourname tree . There are just a few files in the project right now. You can also see the history of changes to this repository, from before you forked it.\ngit log Press esc to leave the git log viewer.\nStop. Check in with your group, and make sure everyone has completed the steps above. Once your whole group is ready, raise your hand to check in with a teacher.\nWorking with Git Whenever you are working on a project, you will go through four steps:\n Edit files: Work on all the files in this project just like normal. Review changes: Look at your changes and make sure you are happy with them. Commit: Save your changes to the repository. Push: Push your copy of the repository up to github.  Let\u0026rsquo;s practice.\nStep 0: Edit files Today we are going to start working on the project plan, using the file planning.md. Open it using Atom:\natom planning.md There are three sections here: the idea, decomposition, and milestone. Each section has some text explaining what\u0026rsquo;s expected. You should replace this text with your actual project plan.\nYou don\u0026rsquo;t have to write your whole project plan right now, but you need to make some changes to practice using git. Under the first section, called \u0026ldquo;the idea\u0026rdquo;, write a short paragraph describing your idea for the final project. If you have a bunch of different possible ideas, you can list them like this:\n- I was thinking I might draw a detailed self-portrait of my face. - I also thought it might be neat to make a drawing I can use to laser cut a customized rack for my desk at home. It will have holes just the right size for all my favorite pens and pencils. - I like to make T-shirts by cutting out stencils and spray-painting them. I want to draw some shapes I can use to laser-cut templates. - I want to draw the Hong Kong skyline. By the way, this file is written in a simple language called Markdown that allows you to format text. Here\u0026rsquo;s a quick guide to markdown. When you have a .md file open in Atom, you can preview the rendered version with the following menu option: Packages \u0026gt; Markdown Preview \u0026gt; Toggle Preview.\nStep 1: Review changes Once you have made some changes to planning.md, save your work in Atom and go back to the Terminal. Let\u0026rsquo;s use git to see what changes you have made. Type:\ngit status ```shell You will see the following message: ```shell On branch master Your branch is up to date with \u0026#39;origin/master\u0026#39;. Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be committed) (use \u0026#34;git checkout -- \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: planning.md no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;) Read the whole message. It is telling you that only file that you have changed is planning.md. Yup. But what changes did you make? Let\u0026rsquo;s use another command to get some more detail:\ngit diff Now you will see a description of what you have added and what you have removed from planning.md:\ndiff --git a/planning.md b/planning.md index ac006b3..90b0e4f 100644 --- a/planning.md +++ b/planning.md @@ -2,10 +2,13 @@ ## The idea -Replace this text with a description of the drawing you want to make. (It would be nice to also explain why you want to make this drawing.) It\u0026#39;s helpful, but not required, to include a sketch of what you are planning. If you want to add an image, you can do so like this: - -![A description of the image, in case the person reading is blind](images/sample.jpg) - +- I was thinking I might draw a detailed semf-portrait of my face. +- I also thought it might be neat to make a drawing I can use to laser cut a + customized rack for my desk at home. It will have holes just the right + size for all my favorite pens and pencils. +- I like to make T-shirts by cutting out stencils and spray-painting them. I + want to draw some shapes I can use to laser-cut templates. +- I want to draw the Hong Kong skyline. ## Decomposition You should always run git status and git diff before you add changes to your repository, to make sure you\u0026rsquo;re saving the changes you meant to add. If you noticed any typos, or want to add something, edit planning.md in Atom again, and then run git status and git diff again.\nStep 2: Commit Now it\u0026rsquo;s time to add these changes to your repository. A commit is a collection of one or more changes that belong together. For example, if you wanted to add a photo of a sketch to your planning document, you would need to edit planning.md, telling it to include the photo. You would also need to add the image file itself to the repo. These two changes belong together, so they should be part of the same commit.\nYou will prepare a commit by adding all the files that have changes. Right now, it\u0026rsquo;s just planning.md, so let\u0026rsquo;s add it to a new commit:\ngit add planning.md Run git status again, and you will see that planning.md has gone from red to green because it has been added to a new commit.\nOn branch master Your branch is up to date with \u0026#39;origin/master\u0026#39;. Changes to be committed: (use \u0026#34;git reset HEAD \u0026lt;file\u0026gt;...\u0026#34; to unstage) modified: planning.md Now we are ready to finalize the commit. Type git commit and you will see an Atom file open. It\u0026rsquo;s time to describe what you did, using a commit message.\nEvery time you commit code, you need to write a message explaining what you have done. Anybody reading your code (teachers, peers, a future version of you) will read the log of your changes to understand what has been happening on the project. The file that opens contains a template explaining how to write your commit message.\nOnce you finish, save the file and close it. Run git log to see the history of your project. You should see your commit right at the top. Congratulations!\nStep 3: Push Now it\u0026rsquo;s time to sync the copy of your repo with the copy on github. Type git push. Reload your repository page on Github (remember the green button?). Click on planning.md; you should see your updated version.\nThis probably felt like a lot of work just to save your work. That\u0026rsquo;s true. But it will get easier as you get used to it, and you will start to see the value of using git when you start working on bigger projects. If you\u0026rsquo;re not glad you learned git five years from now, come see us and we\u0026rsquo;ll give you some extra credit or something :)\nCheck in with your table group and make sure everyone succeeds in committing a change. Once everyone has succeeded, check in with a teacher.\nDeliverables There is no file to turn in for this lab. Instead, you are expected to complete the instructions in this lab, so that your teachers can see your final project repository with a new commit message from you.\n"});})();