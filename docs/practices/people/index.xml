<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>People on Making with Code</title>
    <link>https://cproctor.github.io/making-with-code/practices/people/</link>
    <description>Recent content in People on Making with Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://cproctor.github.io/making-with-code/practices/people/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Assigning competence</title>
      <link>https://cproctor.github.io/making-with-code/practices/people/assigning_competence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/people/assigning_competence/</guid>
      <description>Assigning competence  Assigning competence: Create practices by which students are seen as experts.  One useful practice that embodies this: when helping people from the queue, follow up helping a student by saying, “It looks like you understand this issue pretty well now. When I see another student having the same problem, may I send them to you for help?” That way, the student solidifies the understanding by teaching someone else, and gets to be an expert at that issue.</description>
    </item>
    
    <item>
      <title>Authorship</title>
      <link>https://cproctor.github.io/making-with-code/practices/people/authorship/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/people/authorship/</guid>
      <description>Authorship  Authorship: It is very important that each student develop as an author of her code.  Never touch a student’s keyboard. Instead, sit with the student and guide her in what to do. It can be helpful to bring another laptop, increase the font size, and type out code for the student to copy. It’s also great to have portable whiteboards or writable desk surfaces, so you can develop pseudocode together that then stays with the student.</description>
    </item>
    
    <item>
      <title>Funds of Knowledge</title>
      <link>https://cproctor.github.io/making-with-code/practices/people/funds_of_knowledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/people/funds_of_knowledge/</guid>
      <description>Funds of Knowledge Explain how connected learning is related here...  Funds of knowledge refers to the idea that we will look at students as having lots of resources they can deploy in their learning (rather than viewing them in terms of their deficits). This also means we need to let go of the idea that we’re solely in the position of determining what’s worthwhile in CS. Our students are going to create things that are worthwhile and successful on their terms, not ours.</description>
    </item>
    
    <item>
      <title>Groupwork</title>
      <link>https://cproctor.github.io/making-with-code/practices/people/groupwork/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cproctor.github.io/making-with-code/practices/people/groupwork/</guid>
      <description>Include concepts from &#34;Students As Teachers and Communicators&#34; from Handbook of CS Ed Research.  Groupwork  Groupwork: Small groups are an important context for high-quality disciplinary talk. When students get to choose their groups, they can take advantage of existing social relationships. However, this can create in equities (the strongest students cluster together) and can also bring social tensions into the classroom.  Our recommendation is to always assign seats and groups, change groups regularly (perhaps every unit), and allow students some private input (eg “I really don’t get along with X”).</description>
    </item>
    
  </channel>
</rss>