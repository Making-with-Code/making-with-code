'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/courses/','title':"Courses",'content':""});index.add({'id':1,'href':'/courses/cs9/','title':"CS9",'content':"Welcome to CS 9 Curriculum This is a high-level overview of the curricular units that comprise this introductory course.\n Unit 0: Drawing ↕  Unit 0: Drawing Working within the context of drawing, students practice building up complex programs from simple ones. We’ll use Python’s turtle library, and use our exported SVGs to cut things on the laser cutter/cnc. Loosely inspired by Chris Proctor’s Python drawing unit from GMS \u0026lt;!\u0026mdash; link broken as of Apr 7, 2020 \u0026mdash;\u0026gt;. Programming: Imperative programming; Basics of syntax; functions; decomposition and code reuse. Introductory debugging strategies.\nProblem sets Assign students to create various drawing primitives, and use them to build up more complex functions. Note: Require all primitives end with the turtle in the same state as when it started. This makes building up more complex routines much easier.\nLab Practice using pseudocode to plan algorithms. Use this method to write pseudocode (and then code) to generate complex puzzle pictures such as geometric designs, tessellations, and procedurally-generated patterns from nature.\nProject Create some personally-meaningful drawing. First, a draft will be due with a sketch of the final project and some planning, including planned subroutines and pseudocode. Use it to make something using the fablab. (eg: engrave your laptop, cut patterns in clothes, mill some useful shape.\n    Unit 1: Data Science ↕  Programming: Introduction to functional programming; abstraction. Types: int, float, bool. Introduction to data structures. Iterating over lists. Students will build on code reuse from unit 1, this time writing functions without side effects that can be composed. Curriculum: Based on introductory unit from BJC.\nProblem sets Write basic functions to perform calculations on numbers and lists. Biggest, smallest, mean, median, mode. Quartiles. Scale, clamp, bin.\nLabs Lab 1: Students will write code to plot histograms, scatter plots, and the line of best fit. Lab 2: Students will be introduced to the basics of Pandas and matplotlib, the standard Python libraries for data analysis and plotting.\nProject Collect some data or use an existing dataset. Frame a research question and use the data to answer it.\n    Unit 2: Games ↕  Unit 2: Games Games and other interactive media are some of the most important texts of the digital age. We will play and discuss several games, discussing how they work technically and drawing on theoretical perspectives to talk about how they create meaningful experiences for the player. Programming: prototyping, decomposition of larger problems, incremental \u0026amp; iterative development of larger projects.\nProblem sets Learning how games work can be a great spur toward imagining new ones. This unit’s problem sets will be focused on implementing simple game mechanics.\nLabs Lab 1: Using the Arcade platformer tutorial, program a maze game. Lab 2: Write an algorithm to procedurally-generate random mazes to initialize the maze game. There will also be ad-hoc mini-labs based on what students need for their games. Likely candidates are gravity, inventories, simulating perspective, animation techniques.\nProject Create a game that matters, perhaps as part of a group. This will be very open-ended, but students will be required to submit a substantial proposal, including a game concept with some evidence of prototyping and iteration; wireframes of the game interface; decomposition of tasks and who plans to work on what.\n    Unit 3: Networking ↕  Perhaps even more than through computational power, computers have transformed our lives through networking. This unit explores how computers interact with each other and will give us opportunities to think about the behavior of larger systems, including how our lives are touched by computer networks. Note: I heard Krates has some neat ideas for teaching networking. I’d love to integrate these ideas (and any others), potentially replacing we should talk! Data structures, error handling. Documentation. Abstraction through layers.\nProblem sets Problem sets will focus on asynchronous programming, interacting with JSON, using Python’s requests and Flask libraries.\nLabs Lab 1: HTTP requests and responses. Students will learn about the basics of the HTTP protocol (status codes and methods), and data serialization via JSON. Lab 2: TCP/IP simulation. We will enact a real-world TCP/IP Simulation, discuss network security, hacking, and surveillance, and then groups will write a distributed message-passing client based on the same algorithm.\nProject Chatbot microservices. Each student will write an app which responds to network requests. Some examples might be a Chatbot trying to pass the Turing test, a text-based game, or some useful app. A simple web front-end, CLI, and perhaps a configurable Android app will be provided for consuming microservices. We could also consider providing interfaces for email, SMS, or Twitter. It would be powerful to expose the same API for connecting a chatbot microservice to any of these, to emphasize the value of interchangable parts. One limitation is that students will not yet have experience with databases. Students can maintain state with global objects in memory, and will be provided with routines to persist state using pickle or csv (which they will have learned in Unit 2).\nLibraries will be provided for: Sentiment analysis NLP (eg getting the main noun phrase) External APIs such as weather, news, etc. Additionally, students will be encouraged to write, publish, and compose simpler microservices.\n   "});index.add({'id':2,'href':'/courses/cs9/notes_hk_19_20/','title':"Teaching notes (Hong Kong, 2019-2020)",'content':"Course structures Projects One primary structure in the course will be open-ended projects. The initial units will provide scaffolding, supporting students in designing and implementing projects. Later in the year, students will design their own projects independently.\nLabs Students will work on labs in class which integrate the skills and emphasize developing collaborative problem-solving. Early in the year, labs and projects will be tightly-integrated; students will be guided through creating projects. One feature of labs is that we will be providing some of the libraries students use, allowing them to interact with broader computational systems than they would be able to do on their own. For example, students will initially encounter machine library through functions we provide which allow them to do powerful things with their code.\nProblem Sets There will be regularly-assigned problem sets supporting students in practicing their skills. (We should assess school culture, but I like the idea of having a small problem set due in each day of class). Students may work together on these, but they must be coded independently. Problem sets will be assessed automatically so that students get immediate feedback. Generally, problem sets will lag behind labs so that they are practice with content we’ve already explored together.\nInfrastructure The course will be taught in Python. Each student will do her work primarily in Github repositories. We will use GitHub Classroom to manage assignments. Each project, lab, and problem set will be a separate repo.\nAssessment Projects and labs will be assessed manually, giving feedback not just on correctness but on style, etc. Problem sets will be graded automatically via GitHub webhooks\u0026ndash;every time commits are pushed, the auto-grader will assess the assignment and create or update an Issue giving feedback. We will use pedal to automatically grade problem sets.\nGrading    Score Points Description     Full credit 3/2 Completed everything, with flying colors)   Average credit 2/2 Completed everything)   Subpar 1/2 Not completed or not correctly completed)   No submission 0/2 Or no evidence of good-faith effort    Late - deduct 1 point for submissions between 1-7 days late\nWe will not accept late submissions after 7 days\nRevised work - If you submit something that you put a good faith effort by the first deadline and you want to revise the homework, we can accept revisions up until the end of the unit.\nWhen we assess students’ work manually, we will give feedback on the following:\n Creativity of the homework submission Courage with code - willingness to experiment / try new things Effectiveness of concepts/tools usage - Appropriate, effective use of tools and concepts (suggest when there could be a better option) Coding style  Descriptive function and variable naming Documenting the functionality of functions with comments Decomposition of programs into functions Efficiency and elegance of code    Norms  Getting help: When working on individual projects and on problem sets, students will often need help from teachers. It is important to create structures to allocate teacher time so that pushier students can’t dominate, and to build a culture where it’s a good thing to be stuck, to need help, and to seek help.  One useful tool is the help queue, simply a list on the whiteboard where people can sign up if they need help. All the people sign up at the beginning of class get helped in a random order (to prevent a rush). Respect the queue. Encourage students to seek help from peers. And to look for help online. In particular, it’s not OK to sit idly waiting for help from a teacher. When many students are having the same issue, it may be time to schedule a mini-lesson, 10 or 15 minutes dedicated to working an example to address the issue in a side part of the classroom. All students would be invited (but generally not required to attend). This would generally take priority over helping individuals, since it can help many people at once. When a student is really struggling and needs ongoing support, it can be helpful to break things down into small tasks, help the student get to the point where she can tackle one, and then say, “It looks like you can do this part. Can I go help somebody else and then check back in with you in five minutes?” Make sure you do! Github issues will make it easier to create a practice of identifying problems and asking for help offline. This could be productively combined with office hours. If this turns out to be helpful, it could be nice to occasionally make this work visible in class, for example by starting class off by presenting an interesting bug. (Some students will be much more comfortable asking for this kind of help; when they see that others are doing so, it can help them to also ask for help.) Stanford CS TA’s often had a practice of not looking at students’ code (they wanted to help debug thinking, not code). We believe this is not a helpful stance for supporting beginners.   Funds of knowledge refers to the idea that we will look at students as having lots of resources they can deploy in their learning (rather than viewing them in terms of their deficits). This also means we need to let go of the idea that we’re solely in the position of determining what’s worthwhile in CS. Our students are going to create things that are worthwhile and successful on their terms, not ours. We are going to support them, while also being warmly demanding. This is not a radical proposition, especially in CS: It’s such a new field that nobody really knows what CS is or what its boundaries are. If we’re finding ways of working that are effective, thinking about ideas that feel powerful, and making things that feel like they matter, then we’re doing the right thing. Assigning competence: Create practices by which students are seen as experts.  One useful practice that embodies this: when helping people from the queue, follow up helping a student by saying, “It looks like you understand this issue pretty well now. When I see another student having the same problem, may I send them to you for help?” That way, the student solidifies the understanding by teaching someone else, and gets to be an expert at that issue. You can then keep directing students to that expert for days.   Authorship: It is very important that each student develop as an author of her code.  Never touch a student’s keyboard. Instead, sit with the student and guide her in what to do. It can be helpful to bring another laptop, increase the font size, and type out code for the student to copy. It’s also great to have portable whiteboards or writable desk surfaces, so you can develop pseudocode together that then stays with the student. (The only exception would be if there is some error at a deeper level than the student would be expected to know about, eg incompatible package versions installed.) For problem sets, students should never look at each others’ code. They may work on problems together, using pseudocode and diagrams. This is going to be a challenge, because pair programming might be very productive during labs and group projects.   Groupwork: Small groups are an important context for high-quality disciplinary talk. When students get to choose their groups, they can take advantage of existing social relationships. However, this can create in equities (the strongest students cluster together) and can also bring social tensions into the classroom.  Our recommendation is to always assign seats and groups, change groups regularly (perhaps every unit), and allow students some private input (eg “I really don’t get along with X”).    Background reading Need to develop this section\n"});index.add({'id':3,'href':'/courses/cs9/unit00/lessons/','title':"Lessons",'content':""});index.add({'id':4,'href':'/courses/cs9/unit00/modules/','title':"Modules",'content':""});index.add({'id':5,'href':'/dev/config/','title':"Config",'content':"Configuration Configuration Files Multiple configuration files are provided to build Making with Code for various audiences:\n dev (default) teachers students  To build for a particular audience, use the environment flag:\nhugo --environment=teachers server Configuration Params The following params are defined. Making with Code extends the Book theme, so those params are defined as well. You should not need to modify these directly. Instead, use the environment flag.\nShowTeaching Show teaching content on courses, units, lessons, and modules.\nShowNotes Show teaching notes (only if ShowTeaching is also set).\nShowDev Shows the development documentation and content within the dev_note shortcode.\nBookLogo Points to the site logo, by default \u0026quot;fablearn.png\u0026quot;.\nCustomCSS A list of custom CSS files to inject into the header.\nExcludeTypesFromMenu Certain types are only intended to be included in larger blocks of content, not on their own. Defaults to [\u0026quot;teaching\u0026quot;, \u0026quot;notes\u0026quot;]\nBookSection This param from the Book theme is ignored.\n"});index.add({'id':6,'href':'/dev/','title':"Development",'content':"Development This section describes how to develop Making with Code.\n"});index.add({'id':7,'href':'/courses/cs9/unit00/lessons/lesson00/','title':"Lesson 00.00",'content':" This is a note for developers, using the devnote shortcode.   Terminal Adventure Lab In this lab, we are going to practice using the Terminal.\n Setup ↕  Open a new Terminal window and enter the following commands (Don\u0026rsquo;t type the $.):\n$ cd Destop/cs9/unit_00 $ git clone https://github.com/the-isf-academy/lab_00_terminal_adventure.git $ ls lab_00_terminal_adventure\t$ cd lab_00_terminal_adventure You just copied some code from GitHub onto your computer. Let\u0026rsquo;s have a look:\n$ ls adventure\treturnToShip.py returnToShip.py is a runnable Python file (you can tell by the .py at the end). Run it to see what happens:\n$ python returnToShip.py Your adventure has only just begun. You are not yet ready to return to the ship. More secrets await you in the ocean\u0026#39;s depths. Today, you will use Terminal to explore the contents of the adventure directory.\n    Adventure ↕  Your challenge is to see if you can get the treasure, using just the Terminal. To get started, let\u0026rsquo;s go into the adventure directory:\n$ cd adventure $ ls seafloor\tsinking.txt sinking.txt is a text file, so we can read it. Try using the cat command:\n$ cat sinking.txt You will end by running returnToShip.py in the lab_00_terminal_adventure directory.\nBelow are some Terminal commands which might come in handy on your adventure.\n    Terminal commands    Command What it does     ls List what\u0026rsquo;s in the current directory.   cd ~ Go to your home directory   cd somewhere Go to somewhere   cd .. Go to the parent directory   open file.txt Opens file.txt with its default program   cat file.txt Prints out the contents of file.txt   python x.py Runs the Python program x.py   mv old.txt new.txt Renames a file from old.txt to new.txt. Also works for directories.   mv file.txt dir Moves a file to directory dir.   mv dir1 dir2 Moves dir1 to dir2 or renames if dir2 doesn\u0026rsquo;t exist.   cp old.txt new.txt Copy a file from old.txt to new.txt.   mkdir bag Creates a new directory called bag   pwd Prints the path to where you are in the filesystem   rm file.txt removes (deletes) the file file.txt   rm -d dir removes (deletes) the directory dir   rm -r dir recursively removes (deletes) the directory dir and all subdirectories and files within that directory. Be careful, this is a powerful tool!    More terminal commands These are just for fun. There\u0026rsquo;s lots more\u0026ndash;ask your teachers!\n   Command What it does     say hello Makes the computer say hello (Mac only)   cat sinking.txt | say Makes the computer read the text file aloud   cal Shows you a monthly calendar   banner hello Just try it    Terminal Practice Homework  Part 0 (20 minutes) ↕  Create your own Terminal Adventure game with directories and text files. Start by navigating to your Unit 00 directory and creating a new directory to hold your adventure. This directory should be called homework_02:\n~$ cd Desktop/cs9/unit_00/ ~/Desktop/cs9/unit_00$ mkdir homework_02 ~/Desktop/cs9/unit_00$ cd homework_02  Now you can create directories (using mkdir moon_base) and you can add text files (using atom space_station.txt). Your adventure should have at least three directories and three text files; you may add as many as you want. (The Terminal commands you learned during the Terminal adventure might be useful.)\nHow to turn in your adventure When you finish, you will turn your adventure in to Moodle. First, though, we need to zip up all these directories and files into a single file. We\u0026rsquo;ll use a program called tar to do this. (tar stands for \u0026ldquo;tape archive\u0026rdquo; because it was originally used to create backups to be stored on magnetip tape!) Make sure you are in the unit_00 directory.\n~/Desktop/cs9/unit_00$ ls homework_01.py\thomework_02 ~/Desktop/cs9/unit_00$ tar -czf homework_02.zip homework_02 ~/Desktop/cs9/unit_00$ ls homework_01.py\thomework_02\thomework_02.zip  Now you can turn in homework_02.zip, and your teachers will be able to unzip it to play your adventure.\n    Part 1 (10 minutes) ↕  This part should take about 10 minutes\nTeach somebody else how to play your Terminal Adventure game. This could be a parent, grandparent, sibling, or friend\u0026ndash;anyone you want.\nYou will have to write a short reflection during class about your experience teaching as a computer scientist.\n   Deliverables  A zip file containing at least three directories and at least three text files, submitted to Moodle. A player should experience some kind of game or story when navigating these directories and text files.  "});index.add({'id':8,'href':'/dev/structure/','title':"Structure",'content':"Structure Making with Code is organized into courses, units, and lessons. Courses are the highest-level container for content. They contain one or more units. Units are clusters of content organized around essential questions, providing materials to orchestrate student learning for 1-2 months. Lessons are the finest level of organization, representing one class meeting. Lessons will be the hardest to adapt to different school schedules, so using lessons is optional. Courses and units are purely organizational structures, while lessons are also themselves a content type.\n  Organization of content   Content types The following content types are implemented. For each, ensure that type: contenttype is in the page\u0026rsquo;s front matter.\n course: Introduces a course. unit: Introduces a unit. lesson: Introduces a lesson and includes necessary modules. module: A chunk of content such as a handout, a homework assignment, a lab, or a set of slides. teaching: A pedagogical overview, introducing the content to a teacher preparing to use it. Each course, unit, lesson, and module may have teaching content. notes: Pedagogical details related to a specific implementation of the content.  Courses, units, and lessons are implemented in Hugo as branch bundles, which means each page is built from _index.html and it has access to all the other pages in its directory. Teaching and notes are implemented as pages within branch bundles.\nFile structure Here is an example file structure showing the various content types.\ncontent/ ├── _index.md └── courses └── cs9 ├── _index.md ├── notes.md ├── teaching.md └── unit00 ├── _index.md ├── lessons │ ├── _index.md │ └── lesson00 │ ├── _index.md │ ├── notes.md │ └── teaching.md ├── modules │ ├── _index.md │ ├── hw_terminal_practice │ │ └── _index.md │ └── lab_terminal_adventure │ └── _index.md ├── notes.md └── teaching.md "});index.add({'id':9,'href':'/dev/syntax/','title':"Syntax",'content':"Syntax Making with Code is a static site built with Hugo. You will need to understand the basics of the Hugo framework to contribute. Content is written in markdown, which you can probably pick up just by looking at some of the existing content.\nCustom Shortcodes include_module Includes the full content of a module (from the same unit) in a lesson.\n{{\u0026lt; include_module \u0026quot;lab_terminal_adventure\u0026quot; \u0026gt;}} ref_module Creates a link to a module (from the same unit) in a lesson.\n{{\u0026lt; ref_module \u0026quot;lab_terminal_adventure\u0026quot; \u0026gt;}} devnote Use for notes and TODO items. Content within devnote is highlighted and only shown in the dev environment.\n{{\u0026lt; devnote \u0026gt;}} This lesson went horribly. Need to revise. {{\u0026lt; /devnote \u0026gt;}} "});index.add({'id':10,'href':'/courses/cs9/teaching/','title':"Teaching",'content':"Introduction This is a 9th grade constructionist computer science course. The central goal is to create a rich, diverse community of people making things with code, through which they can develop personal relationships with powerful ideas. The course is designed to help all students learn to interact with code as an expressive, evocative medium, which helps to structure thought. At the same time, the course is designed to support computational literacy, connecting with students’ existing ways of reading and writing. We consider computational thinking as thinking with code.\nThe course is guided by several core beliefs about learning:\n Knowledge is constructed, not transferred. Every learner builds knowledge anew. Knowledge-building is social and grounded in people, places, and materials. At its heart, computer science is about getting to know powerful ideas. This happens best when working on projects that matter to you and your peers.  Course goals This course is designed for students who have no prior formal exposure to computer science, but who have substantial experience with computing in and out of school. The course is expected to be part of a grade 9-12 sequence, culminating in IB computer science exams and preparation for participation in university-level computer science for students who choose to continue study.\nThe course goals are aligned with the CSTA 2017 Standards, which are in turn based on the K12 CS Framework. The K12 CS Framework articulates high-level concepts and practices for primary and secondary computer science; the CSTA 2017 standards articulate grade-level criteria for the concepts and practices. The course does not align strictly to CSTA 2017 Level 3A (grades 9-10) because those standards assume students have previously been learning the earlier standards.\n"});index.add({'id':11,'href':'/courses/cs9/unit00/lessons/lesson00/teaching/','title':"Teaching",'content':"Lesson 0 - Welcome to Computer Science The purpose of the first lesson is to introduce students to the goals, structures, and norms of the course. By the end of Lesson 0.0, students should have a sense for what the course is about as well as a fun initial experience making with code.\n"});index.add({'id':12,'href':'/courses/cs9/unit00/lessons/lesson00/notes/','title':"Teaching notes",'content':"Lesson 0.0 Example schedule  Before class [15 minutes before]  Set up into table groups, have name tags ready for students, physical journal Set up ppt Set up warmup Post it notes Bring some extension cords Play music Write agenda on board     Do Now (5 min) Basic configuration (10 min) Intro to writing code (10 min) Make a drawing (20 min) Put computers away + break (5 min) Intro to CS (5 min) Course Overview/Syllabus (10 min) Norms (10 min) Homework for next class and Questions (3 min) Summary of lesson (2 min)  Norms When students come into the room, it should be configured in a manner suitable for informal working\u0026ndash;ideally small clusters of 4 (so they can break out into pairs or have small discussions). Keep in mind that round tables aren’t always ideal for collaboration because you can’t see one another’s screens. Also keep in mind that people will need access to power to charge their computers. There should be assigned seats so that everyone knows where to go.\n There will always be a do now; you should come in and get started. How you interrupt workflow to make an announcement  “And a hush fell over the crowd…” \u0026lsquo;Raise hand silently\u0026rsquo;   How students get help.  Do now On 3 different post it notes, jot* your ideas down:\n What do you expect CS to be? What are you looking forward to? What do you hope to learn?  Opening discussion Do now discussion: How will you ask students to share? One strategy that can work well is to always have a norm of asking table groups to share amongst themselves, and then call on students to share (not those with hands raised). That way, everybody is expected to be ready to share (after having a chance to prepare with peers), and nobody gets to dominate classroom airtime. I’d suggest you just choose something for now, and then we can reflect on it together.\nWhat do you expect CS to be? What are you looking forward to? What do you hope to learn?\nBasic configuration There should be a script on the website; everyone should work together to follow it.\nInto the Terminal Via a live demo, show students how to edit code with Sublime Text, how to run it in Terminal, and how to see the code run in the Turtle execution window. Practice editing code, saving, running, seeing the result. For now, we’ll be firmly in an imperative programming style: we think of code as giving instructions to the computer. This is the nice thing about the Turtle library: instructions generally have visible effects.\nIteratively build up a small drawing, taking suggestions from the class. Don’t use anything fancy! Let students see you making mistakes. Narrate what’s happening in your head. Be explicit about when students should be watching you and getting ready to participate in answering questions, and when they should be following along on their computers.\nNote that the install script is going to edit ~/.bash_profile to automatically activate the course venv. We won’t even mention this for now.\nBe sure to mention:\n Every file has a path.  Later, we’ll introduce navigation via Terminal. For now, you can grab the thumbnail icon in the header of the Sublime Text window and drag it onto Terminal to get the file path. Unfortunately, MacOS discourages people from thinking about filesystems. Some students probably only access files via Spotlight.   To run the same file again in Terminal, just press the up arrow. For now, the only mode we’ll use to run Python is python filename. No REPL. Show what happens when you make an error. Distinguish between syntax errors, which crash the program, and programmatic errors, when the program does something different than you wanted. Point out why we need input(“Press enter to continue…”) at the end of the program.  A short Quicktime video introduction showing how to manage all the windows, using the ISF computer configuration,might be really helpful.\nMake a drawing Ask students to work in their groups to make a drawing. Provide paper to make a sketch first. They may work in pairs or individually as they prefer. This could become their homework, so everyone should be writing code.\nIntroduce norms of getting help:\n If you get stuck, first see if you can figure out how to fix it by re-reading what you’ve done and the error message. Ask for help at your table group. If that didn’t work, get help from a teacher by signing up on the help queue. Don’t just sit there while you’re waiting! See if you can figure out the problem using our debugging strategies (on the wall?)  Course intro Quick overview of the course. They’re going to want to spend lots of time asking questions about grades, etc. Emphasize that this is a different kind of course. It’s going to be about making things with code.\nHomework Show the homework and talk through what’s expected, including norms around putting in an honest effort and what happens if you get stuck. If there’s extra time, get started on the homework.\n"});index.add({'id':13,'href':'/courses/cs9/unit00/notes/','title':"Teaching notes (Hong Kong, 2019-2020)",'content':" 10 class meetings This initial unit prioritizes getting students making personally-meaningful things as fast as possible. This means we aren’t aiming for completeness. In particular, we’re not introducing variables or conditional control structures in this unit: most students won’t need them, and we’ll spend a lot of time with them in the next unit.  Problem sets Assign students to create various drawing primitives, and use them to build up more complex functions. Note: Require all primitives end with the turtle in the same state as when it started. This makes building up more complex routines much easier.\nLab Practice using pseudocode to plan algorithms. Use this method to write pseudocode (and then code) to generate complex puzzle pictures such as geometric designs, tessellations, and procedurally-generated patterns from nature.\nProject Create some personally-meaningful drawing. First, a draft will be due with a sketch of the final project and some planning, including planned subroutines and pseudocode. Use it to make something using the fablab. (eg: engrave your laptop, cut patterns in clothes, mill some useful shape.\nUnit Calendar Lesson 0: Introduction, turtle\nLesson 1: Loops / lists\nLesson 2: Functions\nLesson 3: Function library\nLesson 4: Lab - Complex drawing\nLesson 5: Complex drawing, introduction to debugging\nLesson 6: Working\nLesson 7: Working\nLesson 8: Working\nLesson 9: Working\n"});index.add({'id':14,'href':'/courses/cs9/unit00/modules/lab_terminal_adventure/','title':"Terminal Adventure Lab",'content':"Terminal Adventure Lab In this lab, we are going to practice using the Terminal.\n Setup ↕  Open a new Terminal window and enter the following commands (Don\u0026rsquo;t type the $.):\n$ cd Destop/cs9/unit_00 $ git clone https://github.com/the-isf-academy/lab_00_terminal_adventure.git $ ls lab_00_terminal_adventure\t$ cd lab_00_terminal_adventure You just copied some code from GitHub onto your computer. Let\u0026rsquo;s have a look:\n$ ls adventure\treturnToShip.py returnToShip.py is a runnable Python file (you can tell by the .py at the end). Run it to see what happens:\n$ python returnToShip.py Your adventure has only just begun. You are not yet ready to return to the ship. More secrets await you in the ocean\u0026#39;s depths. Today, you will use Terminal to explore the contents of the adventure directory.\n    Adventure ↕  Your challenge is to see if you can get the treasure, using just the Terminal. To get started, let\u0026rsquo;s go into the adventure directory:\n$ cd adventure $ ls seafloor\tsinking.txt sinking.txt is a text file, so we can read it. Try using the cat command:\n$ cat sinking.txt You will end by running returnToShip.py in the lab_00_terminal_adventure directory.\nBelow are some Terminal commands which might come in handy on your adventure.\n    Terminal commands    Command What it does     ls List what\u0026rsquo;s in the current directory.   cd ~ Go to your home directory   cd somewhere Go to somewhere   cd .. Go to the parent directory   open file.txt Opens file.txt with its default program   cat file.txt Prints out the contents of file.txt   python x.py Runs the Python program x.py   mv old.txt new.txt Renames a file from old.txt to new.txt. Also works for directories.   mv file.txt dir Moves a file to directory dir.   mv dir1 dir2 Moves dir1 to dir2 or renames if dir2 doesn\u0026rsquo;t exist.   cp old.txt new.txt Copy a file from old.txt to new.txt.   mkdir bag Creates a new directory called bag   pwd Prints the path to where you are in the filesystem   rm file.txt removes (deletes) the file file.txt   rm -d dir removes (deletes) the directory dir   rm -r dir recursively removes (deletes) the directory dir and all subdirectories and files within that directory. Be careful, this is a powerful tool!    More terminal commands These are just for fun. There\u0026rsquo;s lots more\u0026ndash;ask your teachers!\n   Command What it does     say hello Makes the computer say hello (Mac only)   cat sinking.txt | say Makes the computer read the text file aloud   cal Shows you a monthly calendar   banner hello Just try it    "});index.add({'id':15,'href':'/courses/cs9/unit00/modules/hw_terminal_practice/','title':"Terminal Practice Homework",'content':"Terminal Practice Homework  Part 0 (20 minutes) ↕  Create your own Terminal Adventure game with directories and text files. Start by navigating to your Unit 00 directory and creating a new directory to hold your adventure. This directory should be called homework_02:\n~$ cd Desktop/cs9/unit_00/ ~/Desktop/cs9/unit_00$ mkdir homework_02 ~/Desktop/cs9/unit_00$ cd homework_02  Now you can create directories (using mkdir moon_base) and you can add text files (using atom space_station.txt). Your adventure should have at least three directories and three text files; you may add as many as you want. (The Terminal commands you learned during the Terminal adventure might be useful.)\nHow to turn in your adventure When you finish, you will turn your adventure in to Moodle. First, though, we need to zip up all these directories and files into a single file. We\u0026rsquo;ll use a program called tar to do this. (tar stands for \u0026ldquo;tape archive\u0026rdquo; because it was originally used to create backups to be stored on magnetip tape!) Make sure you are in the unit_00 directory.\n~/Desktop/cs9/unit_00$ ls homework_01.py\thomework_02 ~/Desktop/cs9/unit_00$ tar -czf homework_02.zip homework_02 ~/Desktop/cs9/unit_00$ ls homework_01.py\thomework_02\thomework_02.zip  Now you can turn in homework_02.zip, and your teachers will be able to unzip it to play your adventure.\n    Part 1 (10 minutes) ↕  This part should take about 10 minutes\nTeach somebody else how to play your Terminal Adventure game. This could be a parent, grandparent, sibling, or friend\u0026ndash;anyone you want.\nYou will have to write a short reflection during class about your experience teaching as a computer scientist.\n   Deliverables  A zip file containing at least three directories and at least three text files, submitted to Moodle. A player should experience some kind of game or story when navigating these directories and text files.  "});index.add({'id':16,'href':'/courses/cs9/unit00/','title':"Unit 00: Drawing",'content':"Problem sets Assign students to create various drawing primitives, and use them to build up more complex functions. Note: Require all primitives end with the turtle in the same state as when it started. This makes building up more complex routines much easier.\nLab Practice using pseudocode to plan algorithms. Use this method to write pseudocode (and then code) to generate complex puzzle pictures such as geometric designs, tessellations, and procedurally-generated patterns from nature.\nProject Create some personally-meaningful drawing. First, a draft will be due with a sketch of the final project and some planning, including planned subroutines and pseudocode. Use it to make something using the FabLab. (eg: engrave your laptop, cut patterns in clothes, mill some useful shape.\n"});index.add({'id':17,'href':'/courses/cs9/unit00/teaching/','title':"Unit 00: Teaching",'content':"Working within the context of drawing, students practice building up complex programs from simple ones. We’ll use Python’s turtle library, and use our exported SVGs to cut things on the laser cutter/cnc. Loosely inspired by Chris’s Python drawing unit from GMS (this links to the Scratch drawing assignment; further up on the page are lessons translating this into Python). Programming: Imperative programming; Basics of syntax; functions; decomposition and code reuse. Introductory debugging strategies.\n"});})();